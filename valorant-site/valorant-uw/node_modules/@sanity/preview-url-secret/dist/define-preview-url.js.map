{"version":3,"file":"define-preview-url.js","sources":["../src/definePreviewUrl.ts"],"sourcesContent":["import {\n  urlSearchParamPreviewPathname,\n  urlSearchParamPreviewPerspective,\n  urlSearchParamPreviewSecret,\n} from './constants'\nimport type {\n  PreviewUrlResolver,\n  PreviewUrlResolverContext,\n  PreviewUrlResolverOptions,\n} from './types'\n\n/**\n * @internal\n */\nexport function definePreviewUrl<SanityClientType>(\n  options: PreviewUrlResolverOptions,\n): PreviewUrlResolver<SanityClientType> {\n  const {\n    draftMode,\n    previewMode,\n    origin = typeof location === 'undefined' ? 'https://localhost' : location.origin,\n  } = options\n  const enableUrl = previewMode?.enable || draftMode?.enable\n  let {preview = '/'} = options\n  const productionUrl = new URL(preview, origin)\n  const enablePreviewModeUrl = enableUrl ? new URL(enableUrl, origin) : undefined\n\n  return async (context): Promise<string> => {\n    try {\n      if (context.previewSearchParam) {\n        const restoredUrl = new URL(context.previewSearchParam, productionUrl)\n        if (restoredUrl.origin === productionUrl.origin) {\n          preview = `${restoredUrl.pathname}${restoredUrl.search}`\n        }\n      }\n    } catch {\n      // ignore\n    }\n    // Prevent infinite recursion\n    if (\n      typeof location !== 'undefined' &&\n      location.origin === productionUrl.origin &&\n      context.studioBasePath &&\n      (preview.startsWith(`${context.studioBasePath}/`) || preview === context.studioBasePath)\n    ) {\n      preview = options.preview || '/'\n    }\n    const previewUrl = new URL(preview, productionUrl)\n    if (enablePreviewModeUrl) {\n      const enablePreviewModeRequestUrl = new URL(enablePreviewModeUrl)\n      const {searchParams} = enablePreviewModeRequestUrl\n      searchParams.set(urlSearchParamPreviewSecret, context.previewUrlSecret)\n      searchParams.set(urlSearchParamPreviewPerspective, context.studioPreviewPerspective)\n      if (previewUrl.pathname !== enablePreviewModeRequestUrl.pathname) {\n        searchParams.set(\n          urlSearchParamPreviewPathname,\n          `${previewUrl.pathname}${previewUrl.search}`,\n        )\n      }\n\n      return enablePreviewModeRequestUrl.toString()\n    }\n    return previewUrl.toString()\n  }\n}\n\nexport type {PreviewUrlResolver, PreviewUrlResolverContext, PreviewUrlResolverOptions}\n"],"names":[],"mappings":";AAcO,SAAS,iBACd,SACsC;AAChC,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA,SAAS,OAAO,WAAa,MAAc,sBAAsB,SAAS;AAAA,EACxE,IAAA,SACE,YAAY,aAAa,UAAU,WAAW;AAChD,MAAA,EAAC,UAAU,IAAA,IAAO;AACtB,QAAM,gBAAgB,IAAI,IAAI,SAAS,MAAM,GACvC,uBAAuB,YAAY,IAAI,IAAI,WAAW,MAAM,IAAI;AAEtE,SAAO,OAAO,YAA6B;AACrC,QAAA;AACF,UAAI,QAAQ,oBAAoB;AAC9B,cAAM,cAAc,IAAI,IAAI,QAAQ,oBAAoB,aAAa;AACjE,oBAAY,WAAW,cAAc,WACvC,UAAU,GAAG,YAAY,QAAQ,GAAG,YAAY,MAAM;AAAA,MAAA;AAAA,IAE1D,QACM;AAAA,IAAA;AAKN,WAAO,WAAa,OACpB,SAAS,WAAW,cAAc,UAClC,QAAQ,mBACP,QAAQ,WAAW,GAAG,QAAQ,cAAc,GAAG,KAAK,YAAY,QAAQ,oBAEzE,UAAU,QAAQ,WAAW;AAE/B,UAAM,aAAa,IAAI,IAAI,SAAS,aAAa;AACjD,QAAI,sBAAsB;AACxB,YAAM,8BAA8B,IAAI,IAAI,oBAAoB,GAC1D,EAAC,iBAAgB;AACvB,aAAA,aAAa,IAAI,6BAA6B,QAAQ,gBAAgB,GACtE,aAAa,IAAI,kCAAkC,QAAQ,wBAAwB,GAC/E,WAAW,aAAa,4BAA4B,YACtD,aAAa;AAAA,QACX;AAAA,QACA,GAAG,WAAW,QAAQ,GAAG,WAAW,MAAM;AAAA,MAAA,GAIvC,4BAA4B,SAAS;AAAA,IAAA;AAE9C,WAAO,WAAW,SAAS;AAAA,EAC7B;AACF;"}