{"version":3,"file":"toggle-vercel-protection-bypass.js","sources":["../src/toggleVercelProtectionBypass.ts"],"sourcesContent":["import type {SanityClient, SyncTag} from '@sanity/client'\nimport {\n  vercelProtectionBypassSchemaId as _id,\n  vercelProtectionBypassSchemaType as _type,\n  fetchVercelProtectionBypassSecret,\n  tag,\n} from './constants'\nimport type {SanityClientLike} from './types'\n\n/** @internal */\nexport async function enableVercelProtectionBypass(\n  client: SanityClient,\n  secret: string,\n): Promise<void> {\n  const patch = client.patch(_id).set({secret})\n  await client.transaction().createIfNotExists({_id, _type}).patch(patch).commit({tag})\n}\n\n/** @internal */\nexport async function disableVercelProtectionBypass(client: SanityClient): Promise<void> {\n  const patch = client.patch(_id).set({secret: null})\n  await client.transaction().createIfNotExists({_id, _type}).patch(patch).commit({tag})\n}\n\n/** @internal */\nexport function subcribeToVercelProtectionBypass(\n  client: SanityClient,\n  onChange: (secret: string | null) => void,\n): () => void {\n  let controller = new AbortController()\n  let usedTags: SyncTag[] = []\n  async function fetchSecret(lastLiveEventId: string | null, signal: AbortSignal) {\n    const {result, syncTags} = await client.fetch<string | null>(\n      fetchVercelProtectionBypassSecret,\n      {},\n      {\n        filterResponse: false,\n        lastLiveEventId,\n        tag: 'preview-url-secret.fetch-vercel-bypass-protection-secret',\n      },\n    )\n    if (Array.isArray(syncTags)) {\n      usedTags = syncTags\n    }\n    if (!signal.aborted) {\n      onChange(result)\n    }\n  }\n  const subscription = client.live.events().subscribe({\n    next: (event) => {\n      if (event.type === 'message') {\n        controller.abort()\n        controller = new AbortController()\n        if (event.tags.some((tag) => usedTags.includes(tag))) {\n          fetchSecret(event.id, controller.signal)\n        }\n      }\n    },\n    // eslint-disable-next-line no-console\n    error: (reason) => console.error(reason),\n  })\n\n  fetchSecret(null, controller.signal)\n\n  return () => {\n    subscription.unsubscribe()\n    controller.abort()\n  }\n}\n\nexport type {SanityClientLike}\n"],"names":["_id","_type","tag"],"mappings":";AAUsB,eAAA,6BACpB,QACA,QACe;AACT,QAAA,QAAQ,OAAO,MAAMA,8BAAG,EAAE,IAAI,EAAC,QAAO;AAC5C,QAAM,OAAO,YAAA,EAAc,kBAAkB,EAACA,KAAAA,gCAAKC,OAAAA,kCAAM,EAAE,MAAM,KAAK,EAAE,OAAO,EAAC,KAAI;AACtF;AAGA,eAAsB,8BAA8B,QAAqC;AACjF,QAAA,QAAQ,OAAO,MAAMD,8BAAG,EAAE,IAAI,EAAC,QAAQ,MAAK;AAClD,QAAM,OAAO,YAAA,EAAc,kBAAkB,EAACA,KAAAA,gCAAKC,OAAAA,kCAAM,EAAE,MAAM,KAAK,EAAE,OAAO,EAAC,KAAI;AACtF;AAGgB,SAAA,iCACd,QACA,UACY;AACZ,MAAI,aAAa,IAAI,gBAAgB,GACjC,WAAsB,CAAC;AACZ,iBAAA,YAAY,iBAAgC,QAAqB;AAC9E,UAAM,EAAC,QAAQ,aAAY,MAAM,OAAO;AAAA,MACtC;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACE,gBAAgB;AAAA,QAChB;AAAA,QACA,KAAK;AAAA,MAAA;AAAA,IAET;AACI,UAAM,QAAQ,QAAQ,MACxB,WAAW,WAER,OAAO,WACV,SAAS,MAAM;AAAA,EAAA;AAGnB,QAAM,eAAe,OAAO,KAAK,OAAA,EAAS,UAAU;AAAA,IAClD,MAAM,CAAC,UAAU;AACX,YAAM,SAAS,cACjB,WAAW,MAAA,GACX,aAAa,IAAI,gBAAgB,GAC7B,MAAM,KAAK,KAAK,CAACC,SAAQ,SAAS,SAASA,IAAG,CAAC,KACjD,YAAY,MAAM,IAAI,WAAW,MAAM;AAAA,IAG7C;AAAA;AAAA,IAEA,OAAO,CAAC,WAAW,QAAQ,MAAM,MAAM;AAAA,EAAA,CACxC;AAED,SAAA,YAAY,MAAM,WAAW,MAAM,GAE5B,MAAM;AACE,iBAAA,YAAA,GACb,WAAW,MAAM;AAAA,EACnB;AACF;"}