import {existsSync, statSync} from 'node:fs'
import {join} from 'node:path'
import process from 'node:process'

export function getFunctionSource(src) {
  if (statSync(src).isDirectory()) {
    const indexPath = join(src, 'index.js')
    if (!existsSync(indexPath)) {
      throw Error(`Function directory ${src} has no index.js`)
    }
    return indexPath
  }
  return src
}

async function enhanceContext(context = {}) {
  const {apiHost, apiVersion, dataset, projectId, token} = context
  const enhancedContext = {...context}

  try {
    if (apiHost && apiVersion && dataset && projectId && token) {
      // @ts-ignore
      const {createClient} = await import('@sanity/client')
      const client = createClient({
        projectId,
        dataset,
        useCdn: true,
        apiHost,
        apiVersion,
        token,
      })
      enhancedContext.client = client
    }
  } catch {
    // ignore as user hasn't provided the @sanity/client
  }
  return enhancedContext
}

// Start when payload data arrives from parent process
process.on('message', async (data) => {
  let jsonData = null
  try {
    jsonData = JSON.parse(data)
  } catch {
    // invalid payload so return early
    return
  }
  const {srcPath, payload} = jsonData
  const {context, ...event} = payload
  const enhancedContext = await enhanceContext(context)
  let logs = ''
  let json = null

  // Import the function code
  const {handler} = await import(getFunctionSource(join(process.cwd(), srcPath)))

  // backup stdout
  const originalStdoutWrite = process.stdout.write.bind(process.stdout)

  // redirect stdout to a buffer
  process.stdout.write = (chunk) => {
    if (typeof chunk === 'string') {
      logs += chunk
    }
    return true
  }

  if (handler && typeof handler === 'function') {
    json = await handler({context: enhancedContext, event})
  }

  // revert changes to stdout
  process.stdout.write = originalStdoutWrite

  // Send result of handler code to parent process.
  process.send(JSON.stringify({json, logs}))
})
