/** @internal */
export interface AuthParams {
    token: string;
    projectId: string;
}
/** @internal */
export interface LocalBlueprint {
    blueprintVersion?: string;
    values?: Record<string, unknown>;
    outputs?: Array<Record<string, unknown>>;
    resources?: Array<LocalResource>;
}
/** @internal */
export interface LocalResource {
    name: string;
    type: string;
    displayName?: string;
}
export declare function isLocalFunctionResource(r: LocalResource): r is LocalFunctionResource;
/** @internal */
export interface LocalFunctionResource extends LocalResource {
    src?: string;
    memory?: number;
    timeout?: number;
    env?: Record<string, string>;
}
export interface Stack {
    id: string;
    name: string;
    displayName: string;
    projectId: string;
    resources: Array<StackResource>;
    createdAt?: string;
    updatedAt?: string;
    recentOperation?: StackOperation;
}
/** @internal */
export interface StackResource {
    id: string;
    displayName: string;
    name: string;
    type: string;
    externalId: string;
    parameters?: Record<string, unknown>;
}
/** @internal */
export interface StackFunctionResource extends StackResource {
    parameters: {
        src: string;
        memory?: number;
        timeout?: number;
        env?: Record<string, string>;
    };
}
/** @internal */
export interface StackOperation {
    id: string;
    status: string;
    createdAt?: string;
    completedAt?: string;
}
/** @internal */
export interface StackPayload {
    name: string;
    projectId: string;
    document: LocalBlueprint;
}
/** @internal */
export interface InvokePayloadOptions {
    data?: string;
    file?: string;
    timeout?: number;
}
/** @internal */
export interface InvokeContextOptions {
    apiVersion?: string;
    dataset?: string;
    projectId?: string;
}
/** @internal */
export interface InvocationResponse {
    error: undefined | unknown;
    json: object | undefined;
    logs: string | undefined;
}
/** @internal */
export interface BlueprintLog {
    timestamp: string;
    message: string;
    stackId: string;
    level: string;
}
/** @internal */
export interface FunctionLog {
    time: string;
    requestId: string;
    level: string;
    message: string;
}
/** @internal */
export declare enum BlueprintParserErrorType {
    MissingProject = "missing_project",
    MissingStack = "missing_stack",
    InvalidProperty = "invalid_property",
    InvalidStack = "invalid_stack"
}
/** @internal */
export interface BlueprintParserError {
    message: string;
    type: BlueprintParserErrorType;
}
