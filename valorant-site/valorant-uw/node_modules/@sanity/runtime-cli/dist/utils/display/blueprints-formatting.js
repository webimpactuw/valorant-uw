import { treeify } from 'array-treeify';
import { blue, bold, boldnblue, green, red, yellow } from './colors.js';
import { formatDate, formatDuration } from './dates.js';
export function formatTitle(title, name) {
    return `${boldnblue(title)} ${bold(`"${name}"`)}`;
}
export function formatResourceTree(resources) {
    if (!resources || resources.length === 0) {
        return '  No resources in this stack';
    }
    const output = [];
    output.push(`${blue('Stack Resources')} [${resources.length}]`);
    const functionResources = resources.filter((r) => r.type?.startsWith('sanity.function.'));
    const otherResources = resources.filter((r) => !r.type?.startsWith('sanity.function.'));
    const hasOtherResources = otherResources.length > 0;
    if (functionResources.length > 0) {
        const functionsOutput = [];
        functionsOutput.push(`${bold('Functions')} [${functionResources.length}]`);
        const functionResourcesOutput = functionResources.map((fn) => {
            const name = green(fn.displayName || fn.name);
            const externalId = fn.externalId ? `Fn<${yellow(fn.externalId)}>` : '';
            return `"${name}" ${externalId}`;
        });
        functionsOutput.push(functionResourcesOutput);
        output.push(functionsOutput);
    }
    if (hasOtherResources) {
        const otherOutput = [];
        otherOutput.push(`${bold('Other Resources')} [${otherResources.length}]`);
        const otherResourcesOutput = otherResources.map((other) => {
            return `"${yellow(other.displayName ?? other.name ?? 'unnamed')}"`;
        });
        otherOutput.push(otherResourcesOutput);
        output.push(otherOutput);
    }
    return treeify(output);
}
export function formatStackInfo(stack, isCurrentStack = false) {
    const output = [];
    const isStack = 'id' in stack;
    if (isStack) {
        const stackName = isCurrentStack ? boldnblue(stack.name) : bold(stack.name);
        output.push(`"${stackName}" <${yellow(stack.id)}>${isCurrentStack ? ' (current)' : ''}`);
    }
    else {
        output.push('Local Blueprint');
    }
    const infoOutput = [];
    if (stack.resources) {
        infoOutput.push(`${stack.resources.length} resource${stack.resources.length === 1 ? '' : 's'}`);
    }
    if (isStack) {
        if (stack.createdAt)
            infoOutput.push(`Created: ${formatDate(stack.createdAt)}`);
        if (stack.updatedAt)
            infoOutput.push(`Updated: ${formatDate(stack.updatedAt)}`);
        if (stack.recentOperation) {
            const operation = stack.recentOperation;
            const operationOutput = [];
            if (operation.id)
                operationOutput.push(`Recent Operation <${yellow(operation.id)}>:`);
            if (operation.status) {
                const operationColor = operation.status === 'COMPLETED' ? green : red;
                const status = operation.status || 'UNKNOWN';
                operationOutput.push(`Status: ${operationColor(status)}`);
            }
            if (operation.createdAt)
                operationOutput.push(`Started: ${formatDate(operation.createdAt)}`);
            if (operation.status === 'COMPLETED' && operation.completedAt && operation.createdAt) {
                operationOutput.push(`Completed: ${formatDate(operation.completedAt)}`);
                operationOutput.push(`Duration: ${yellow(formatDuration(operation.createdAt, operation.completedAt))}`);
            }
            infoOutput.push(operationOutput);
        }
    }
    output.push(infoOutput);
    return treeify(output, { plain: true });
}
export function formatStacksListing(stacks, currentStackId) {
    if (!stacks || stacks.length === 0)
        return 'No stacks found';
    const output = [];
    for (const stack of stacks) {
        const isCurrentStack = currentStackId === stack.id;
        output.push(formatStackInfo(stack, isCurrentStack));
    }
    return output.join('\n');
}
