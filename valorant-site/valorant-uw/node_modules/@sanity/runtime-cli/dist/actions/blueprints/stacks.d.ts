import type { AuthParams, Stack, StackPayload } from '../../utils/types.js';
export declare const stacksUrl: string;
interface ListStacksResponse {
    ok: boolean;
    error: string | null;
    stacks: Stack[];
}
export declare function listStacks(auth: AuthParams): Promise<ListStacksResponse>;
interface GetStackByNameResponse {
    ok: boolean;
    error: string | null;
    stack: Stack | null;
    stackId: string | null;
    availableStacks?: string[];
}
/** @deprecated Use getStack instead */
export declare function getStackByName({ name, auth, }: {
    name: string;
    auth: AuthParams;
}): Promise<GetStackByNameResponse>;
interface GetStackResponse {
    ok: boolean;
    error: string | null;
    stack: Stack;
}
export declare function getStack({ stackId, auth, }: {
    stackId: string;
    auth: AuthParams;
}): Promise<GetStackResponse>;
interface CreateStackResponse {
    ok: boolean;
    error: string | null;
    stack: Stack;
}
export declare function createStack({ stackPayload, auth, }: {
    stackPayload: StackPayload;
    auth: AuthParams;
}): Promise<CreateStackResponse>;
interface UpdateStackResponse {
    ok: boolean;
    error: string | null;
    stack: Stack;
}
export declare function updateStack({ stackId, stackPayload, auth, }: {
    stackId: string;
    stackPayload: StackPayload;
    auth: AuthParams;
}): Promise<UpdateStackResponse>;
interface DestroyStackResponse {
    ok: boolean;
    error: string | null;
    stack: Stack;
}
export declare function destroyStack({ stackId, auth, }: {
    stackId: string;
    auth: AuthParams;
}): Promise<DestroyStackResponse>;
export {};
