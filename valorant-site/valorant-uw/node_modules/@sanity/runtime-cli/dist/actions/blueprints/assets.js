import fs from 'node:fs';
import path from 'node:path';
import { cwd } from 'node:process';
import AdmZip from 'adm-zip';
import config from '../../config.js';
import getHeaders from '../../utils/get-headers.js';
const { blueprints } = config.server;
export const stashUrl = `${blueprints}vX/blueprints/assets/stash`;
export async function stashAsset({ resource, auth, }) {
    if (!resource.src)
        throw new Error('Resource src is required');
    try {
        const sourcePath = path.join(cwd(), resource.src);
        const stats = await fs.promises.stat(sourcePath);
        const zip = new AdmZip();
        if (stats.isDirectory()) {
            zip.addLocalFolder(sourcePath);
        }
        else {
            zip.addLocalFile(sourcePath, '', 'index.js');
        }
        const zipBuffer = zip.toBuffer();
        const base64Zip = zipBuffer.toString('base64');
        const assetResponse = await fetch(stashUrl, {
            method: 'POST',
            headers: getHeaders(auth),
            body: JSON.stringify({
                file: base64Zip,
                filename: `${resource.name}.zip`,
            }),
        });
        const assetJson = await assetResponse.json();
        if (assetResponse.ok) {
            return { success: true, assetId: assetJson.id };
        }
        return { success: false, error: assetJson.message || 'Unknown error' };
    }
    catch (err) {
        let error = '';
        if (err instanceof Error)
            error = err.message;
        return { success: false, error };
    }
}
