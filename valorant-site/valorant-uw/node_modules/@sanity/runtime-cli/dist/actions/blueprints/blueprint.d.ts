import type { BlueprintParserError, LocalBlueprint, LocalResource, Stack } from '../../utils/types.js';
export declare const DEFAULT_BLUEPRINT_CONTENT: {
    blueprintVersion: string;
    resources: never[];
};
/**
 * Finds the blueprint file in the given path or current working directory
 * @param blueprintFilePath - The full path of the blueprint file
 * @returns The path, file name, and extension of the blueprint file
 */
export declare function findBlueprintFile(blueprintFilePath?: string): {
    path: string;
    fileName: string;
    extension: string;
} | null;
export declare function readBlueprintOnDisk({ blueprintPath, getStack, token, }?: {
    blueprintPath?: string;
    getStack?: boolean;
    token?: string;
}): Promise<{
    fileInfo: {
        path: string;
        fileName: string;
        extension: string;
    };
    parsedBlueprint: LocalBlueprint;
    errors: BlueprintParserError[];
    projectId?: string;
    stackId?: string;
    deployedStack?: Stack;
}>;
export declare function writeBlueprintToDisk({ path, fileType, content, }: {
    path: string;
    fileType: 'json' | 'js' | 'ts';
    content?: Record<string, unknown>;
}): string;
export declare function readConfigFile(blueprintPath?: string | undefined): {
    projectId?: string;
    stackId?: string;
} | null;
export declare function writeConfigFile({ blueprintPath, projectId, stackId, }: {
    blueprintPath?: string;
    projectId: string;
    stackId?: string;
}): void;
export declare function addResourceToBlueprint({ blueprintFilePath, resource, }: {
    blueprintFilePath?: string;
    resource: LocalResource;
}): LocalResource | undefined;
