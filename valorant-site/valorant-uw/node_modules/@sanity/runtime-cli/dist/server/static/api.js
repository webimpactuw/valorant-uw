/* eslint-disable n/no-unsupported-features/node-builtins */
import {Store} from './vendor/vendor.bundle.js'

// eslint-disable-next-line new-cap
const store = Store()

export default function API() {
  return {
    blueprint,
    invoke,
    projects,
    datasets,
    store,
    subscribe: store.subscribe,
    unsubscribe: store.unsubscribe,
  }
}

function invoke(payloadText = '{}') {
  store.inprogress = true
  const start = Date.now()
  const payload = {
    data: payloadText,
    func: store.selectedIndex,
  }
  fetch('/invoke', {
    body: JSON.stringify(payload),
    headers: {
      'Content-Type': 'application/json',
    },
    method: 'POST',
  })
    .then((response) => response.json())
    .then((data) => {
      store.inprogress = false
      store.result = {
        ...data,
        time: Date.now() - start,
      }
    })
}

function blueprint() {
  fetch('/blueprint')
    .then((response) => response.json())
    .then((blueprint) => {
      const functions = blueprint?.resources.filter((r) => r.type.startsWith('sanity.function.'))

      store.functions = functions
      store.selectedIndex = functions[0].src
    })
    .catch(() => {
      store.functions = []
    })
}

function projects() {
  fetch('/projects')
    .then((response) => response.json())
    .then((projects) => {
      store.projects = projects
      store.selectedProject = projects[0].id
    })
    .catch(() => {
      store.projects = []
    })
}

function datasets(selectedProject) {
  fetch(`/datasets?project=${selectedProject}`)
    .then((response) => response.json())
    .then((datasets) => {
      store.datasets = datasets
      store.selectedDataset = datasets[0].name
    })
    .catch(() => {
      store.datasets = []
    })
}
