/* globals customElements */
import {EditorView, basicSetup, json} from '../vendor/vendor.bundle.js'
import {ApiBaseElement} from './api-base.js'

const template = `<m-box>
    <h2 class="mar-t-0">Payload</h2>
    <div id="payload" name="payload"></div>
    <form class="mar-t-sm">
      <fieldset>
        <label>API Version</label>
        <input name="apiVersion" id="apiversion">
      </fieldset>
      <projects-dropdown></projects-dropdown>
      <dataset-dropdown></dataset-dropdown>
    </form>
    <button ord="primary" class="mar-t-sm sanity-button">Invoke</button>
</m-box>
`
class PayloadPanel extends ApiBaseElement {
  invoke = () => {
    const payloadText = this.api.store.payload.state.doc.text.join('') || '{}'
    const event = JSON.parse(payloadText)
    const context = {
      apiVersion: this.apiVersion.value,
      dataset: this.api.store.selectedDataset,
      projectId: this.api.store.selectedProject,
    }
    this.api.invoke({context, event})
  }
  updateButtonText = ({inprogress}) => {
    if (inprogress) {
      this.button.setAttribute('disabled', '')
      this.button.innerHTML = '<network-spinner></network-spinner>'
    } else {
      this.button.removeAttribute('disabled')
      this.button.innerText = 'Invoke'
    }
  }

  connectedCallback() {
    this.innerHTML = template
    this.payload = this.querySelector('#payload')
    this.apiVersion = this.querySelector('#apiversion')
    this.datasetname = this.querySelector('#datasetname')
    this.productId = this.querySelector('#project')
    this.button = this.querySelector('button')
    this.button.addEventListener('click', this.invoke)
    this.api.subscribe(this.updateButtonText, ['inprogress'])

    this.api.store.payload = new EditorView({
      doc: '\n\n\n\n',
      extensions: [basicSetup, json()],
      parent: this.payload,
    })
  }

  disconnectedCallback() {
    this.button.removeEventListener('click', this.invoke)
  }
}

customElements.define('payload-panel', PayloadPanel)
