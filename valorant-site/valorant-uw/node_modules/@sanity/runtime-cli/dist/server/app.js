import { existsSync, readFileSync } from 'node:fs';
import { default as mime } from 'mime-types';
import { readBlueprintOnDisk } from '../actions/blueprints/blueprint.js';
import config from '../config.js';
import invoke from '../utils/invoke-local.js';
import * as http from 'node:http';
const host = 'localhost';
const app = (port) => {
    const requestListener = async (req, res) => {
        res.setHeader('Content-Type', 'application/json');
        switch (true) {
            case req.url === '/blueprint': {
                try {
                    const { parsedBlueprint } = await readBlueprintOnDisk({ getStack: false });
                    res.setHeader('Content-Type', 'application/json');
                    res.writeHead(200);
                    res.end(JSON.stringify(parsedBlueprint));
                }
                catch {
                    res.writeHead(404);
                    res.end();
                }
                break;
            }
            case req.url === '/invoke': {
                if (req.method === 'POST') {
                    let body = '';
                    req.on('data', (data) => {
                        body += data;
                    });
                    req.on('end', async () => {
                        const { data, func } = JSON.parse(body);
                        const { context, event } = data;
                        res.setHeader('Content-Type', 'application/json');
                        try {
                            const response = await invoke(func, event, context);
                            res.writeHead(200);
                            res.end(JSON.stringify(response));
                        }
                        catch (error) {
                            const response = { logs: '', error: '' };
                            if (error instanceof Error) {
                                response.logs = error.message;
                            }
                            res.writeHead(200);
                            res.end(JSON.stringify(response));
                        }
                    });
                }
                break;
            }
            case req.url === '/projects': {
                res.setHeader('Content-Type', 'application/json');
                try {
                    const response = await fetch(`${config.apiUrl}/v2021-06-07/projects?includeOrganizationProjects=true`, {
                        headers: {
                            Authorization: `Bearer ${config.token}`,
                        },
                    });
                    const json = await response.json();
                    res.writeHead(200);
                    res.end(JSON.stringify(json));
                }
                catch (error) {
                    res.writeHead(200);
                    res.end(JSON.stringify([]));
                }
                break;
            }
            case req.url?.startsWith('/datasets'): {
                const url = req.url || '';
                const matches = url.match(/[?&]project=([^&]+)/) || [];
                const projectId = matches ? matches[1] : null;
                res.setHeader('Content-Type', 'application/json');
                try {
                    let json = [];
                    if (projectId) {
                        const response = await fetch(`${config.apiUrl}/v2024-08-25/projects/${projectId}/datasets?includeStats=true`, {
                            headers: {
                                Authorization: `Bearer ${config.token}`,
                            },
                        });
                        json = await response.json();
                    }
                    res.writeHead(200);
                    res.end(JSON.stringify(json));
                }
                catch (error) {
                    res.writeHead(200);
                    res.end(JSON.stringify([]));
                }
                break;
            }
            default: {
                const requestPath = req.url?.endsWith('/') ? `${req.url}index.html` : req.url;
                const filePath = new URL(`./static${requestPath}`, import.meta.url).pathname;
                if (existsSync(filePath)) {
                    const mimeType = mime.lookup(filePath) || 'text/plain';
                    res.setHeader('Content-Type', mimeType);
                    const content = readFileSync(filePath).toString();
                    res.writeHead(200);
                    res.end(content);
                }
                else {
                    res.writeHead(404);
                    res.end();
                }
                break;
            }
        }
    };
    const server = http.createServer(requestListener);
    server.listen(port, host, () => { });
};
export default app;
