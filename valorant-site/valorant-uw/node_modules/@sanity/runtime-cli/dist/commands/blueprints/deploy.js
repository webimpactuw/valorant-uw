import { Command } from '@oclif/core';
import inquirer from 'inquirer';
import Spinner from 'yocto-spinner';
import { stashAsset } from '../../actions/blueprints/assets.js';
import { readBlueprintOnDisk, writeConfigFile } from '../../actions/blueprints/blueprint.js';
import { createStack, updateStack } from '../../actions/blueprints/stacks.js';
import config from '../../config.js';
import { bold, green, red, yellow } from '../../utils/display/colors.js';
import { isLocalFunctionResource } from '../../utils/types.js';
const { token } = config;
export default class Deploy extends Command {
    static description = 'Deploy a Blueprint';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    async run() {
        const { errors, projectId: configuredProjectId, stackId, parsedBlueprint: { resources }, deployedStack, } = await readBlueprintOnDisk({ getStack: true, token });
        if (errors.length > 0) {
            // printErrors(errors) // TODO: error printer in formatting
            this.log('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (stackId && !deployedStack)
            this.error('Stack ID defined but deployed stack not found');
        let projectId = configuredProjectId;
        if (!projectId) {
            this.log('No Sanity Project context found in Blueprint configuration.');
            const { maybeProjectId } = await inquirer.prompt([
                {
                    type: 'input',
                    name: 'maybeProjectId',
                    message: 'Enter Sanity Project ID:',
                },
            ]);
            projectId = maybeProjectId;
        }
        if (!projectId)
            this.error('Sanity Project context is required');
        const auth = { token, projectId };
        let name = deployedStack?.name;
        if (!name) {
            const { stackName } = await inquirer.prompt([
                {
                    type: 'input',
                    name: 'stackName',
                    message: 'Enter stack name:',
                    validate: (input) => input.length > 0 || 'Stack name is required',
                },
            ]);
            name = stackName;
        }
        if (!name)
            this.error('Stack name is required');
        const validResources = resources?.filter((r) => r.type);
        const functionResources = validResources?.filter(isLocalFunctionResource);
        // First stash all function assets
        if (functionResources?.length) {
            for (const resource of functionResources) {
                const fnSpinner = Spinner({ text: `Processing ${resource.name}...` }).start();
                const result = await stashAsset({ resource, auth });
                if (result.success && result.assetId) {
                    const src = resource.src;
                    resource.src = result.assetId; // TODO: properly reference asset - for now, the API expects the assetId
                    fnSpinner.success(`${resource.name} <${yellow(result.assetId)}>`);
                    this.log(`   Source: ${src}`);
                }
                else {
                    fnSpinner.error(`Failed to process ${resource.name}`);
                    this.log(`   Error: ${result.error}`);
                    return;
                }
            }
        }
        const stackPayload = {
            name,
            projectId,
            document: { resources: validResources },
        };
        this.debug('BLUEPRINT DOCUMENT:', stackPayload);
        const spinner = Spinner({ text: 'Deploying stack...' }).start();
        const { ok: deployOk, stack, error: deployError, } = deployedStack
            ? await updateStack({ stackId: deployedStack.id, stackPayload, auth })
            : await createStack({ stackPayload, auth });
        this.debug('STACK RESPONSE:', stack);
        if (deployOk) {
            spinner.success(`${green('Success!')} Stack "${bold(stack.name)}" ${deployedStack ? 'updated' : 'created'} <${yellow(stack.id)}>`);
            writeConfigFile({
                projectId,
                stackId: stack.id,
            });
            this.log('\nUse `sanity blueprints info` to check deployment status');
        }
        else {
            this.debug('STACK ERROR RESPONSE:', stack);
            spinner.error(`${red('Failed')} to ${deployedStack ? 'update' : 'create'} stack`);
            this.log(`Error: ${deployError || JSON.stringify(stack, null, 2) || 'Unknown error'}`);
        }
    }
}
