import { join } from 'node:path';
import { cwd } from 'node:process';
import { Command } from '@oclif/core';
import inquirer from 'inquirer';
import { findBlueprintFile, writeBlueprintToDisk, writeConfigFile, } from '../../actions/blueprints/blueprint.js';
import { listProjects } from '../../actions/blueprints/projects.js';
import config from '../../config.js';
const { token } = config;
export default class Init extends Command {
    static description = 'Initialize a new Blueprint';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    async run() {
        const existingBlueprint = findBlueprintFile(undefined);
        if (existingBlueprint) {
            this.error(`A blueprint file already exists: ${existingBlueprint.fileName}`);
        }
        const { blueprintExtension } = await inquirer.prompt([
            {
                type: 'list',
                name: 'blueprintExtension',
                message: 'Choose a blueprint type:',
                choices: [
                    { name: 'JSON (Recommended)', value: 'json' },
                    { name: 'JavaScript (Beta)', value: 'js' },
                    { name: 'TypeScript (Alpha)', value: 'ts' },
                ],
                default: 'json',
            },
        ]);
        const { ok, projects, error } = await listProjects({ token });
        if (!ok)
            this.error(error ?? 'Unknown error listing projects');
        if (projects.length === 0) {
            this.error('No projects found. Please create a project in Sanity.io first.');
        }
        const projectChoices = projects.map(({ displayName, id }) => ({
            name: `${displayName} <${id}>`,
            value: id,
        }));
        const { projectId } = await inquirer.prompt([
            {
                type: 'list',
                name: 'projectId',
                message: 'Select your Sanity project:',
                choices: projectChoices,
            },
        ]);
        const fileName = `blueprint.${blueprintExtension}`;
        const filePath = join(cwd(), fileName);
        writeBlueprintToDisk({ path: filePath, fileType: blueprintExtension });
        writeConfigFile({ projectId });
        this.log(`Created new blueprint: ./${fileName}`);
        if (blueprintExtension === 'ts') {
            this.log('\nNote: TypeScript support requires "tsx" to be installed. Run: npm install -D tsx');
        }
    }
}
