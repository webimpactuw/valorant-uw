import { Command, Flags } from '@oclif/core';
import highlight from 'color-json';
import inquirer from 'inquirer';
import { readConfigFile, writeConfigFile } from '../../actions/blueprints/blueprint.js';
import { listProjects } from '../../actions/blueprints/projects.js';
import { listStacks } from '../../actions/blueprints/stacks.js';
import config from '../../config.js';
const { token } = config;
export default class Config extends Command {
    static description = 'View or edit Blueprint configuration';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --edit',
    ];
    static flags = {
        edit: Flags.boolean({
            description: 'Edit the configuration',
            default: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Config);
        const config = readConfigFile();
        if (!config) {
            this.error('No configuration found. Run `sanity blueprints init` first.');
        }
        this.log('\nCurrent configuration:');
        this.log(highlight(JSON.stringify(config, null, 2)));
        if (!flags.edit)
            return;
        const { ok, projects, error } = await listProjects({ token });
        if (!ok)
            this.error(error ?? 'Unknown error listing projects');
        if (projects.length === 0) {
            this.error('No projects found. Please create a project in Sanity.io first.');
        }
        const projectChoices = projects.map(({ displayName, id }) => ({
            name: `${displayName} <${id}>`,
            value: id,
        }));
        const { projectId } = await inquirer.prompt([
            {
                type: 'list',
                name: 'projectId',
                message: 'Select your Sanity project:',
                choices: projectChoices,
                default: config.projectId,
            },
        ]);
        const auth = { token, projectId };
        // get stacks for selected project
        const { ok: stacksOk, stacks, error: stacksError } = await listStacks(auth);
        if (!stacksOk)
            this.error(stacksError ?? 'Unknown error listing stacks');
        let stackId;
        if (stacks.length > 0) {
            const stackChoices = stacks.map(({ name, id }) => ({
                name: `${name} <${id}>`,
                value: id,
            }));
            const { stackId: selectedStackId } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'stackId',
                    message: 'Select a stack:',
                    choices: stackChoices,
                    default: config.stackId,
                },
            ]);
            stackId = selectedStackId;
        }
        writeConfigFile({ projectId, stackId });
        this.log('\nConfiguration updated successfully.');
    }
}
