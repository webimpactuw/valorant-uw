import { Args, Command } from '@oclif/core';
import highlight from 'color-json';
import inquirer from 'inquirer';
import { findBlueprintFile } from '../../actions/blueprints/blueprint.js';
import { createFunctionResource } from '../../actions/blueprints/resources.js';
export default class Add extends Command {
    static description = 'Add a resource to a Blueprint';
    static examples = ['<%= config.bin %> <%= command.id %> function'];
    static args = {
        type: Args.string({
            description: 'Type of resource to add (e.g. function)',
            options: ['function'],
            required: true,
        }),
    };
    async run() {
        const { args } = await this.parse(Add);
        const existingBlueprint = findBlueprintFile();
        if (!existingBlueprint) {
            this.error('No blueprint file found. Run `sanity blueprints init` first.');
        }
        if (args.type === 'function') {
            await this.addFunction();
            return;
        }
        this.error(`Unsupported resource type: ${args.type}`);
    }
    async addFunction() {
        const { functionName } = await inquirer.prompt([
            {
                type: 'input',
                name: 'functionName',
                message: 'Enter function name:',
                validate: (input) => input.length > 0 || 'Function name is required',
            },
        ]);
        const { functionType } = await inquirer.prompt([
            {
                type: 'list',
                name: 'functionType',
                message: 'Choose function type:',
                choices: [
                    { name: 'Document Mutation', value: 'document-mutation' },
                    { name: 'Document Publish', value: 'document-publish' },
                    { name: 'Document Update', value: 'document-update' },
                    { name: 'Document Delete', value: 'document-delete' },
                ],
                default: 'document-mutation',
            },
        ]);
        const { filePath, resourceAdded, resource } = createFunctionResource({
            name: functionName,
            type: functionType,
            displayName: functionName,
        });
        this.log(`\nCreated function: ${filePath}`);
        if (!resourceAdded) {
            // print the resource JSON for manual addition
            this.log('\nAdd this Function resource to your blueprint:');
            this.log(highlight(JSON.stringify(resource, null, 2)));
        }
        else {
            // added to blueprint.json
            this.log('Function resource added to blueprint');
        }
    }
}
