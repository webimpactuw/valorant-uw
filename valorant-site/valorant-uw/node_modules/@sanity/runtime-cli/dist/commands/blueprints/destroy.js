import { setTimeout } from 'node:timers/promises';
import { Command, Flags } from '@oclif/core';
import inquirer from 'inquirer';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { destroyStack, getStack } from '../../actions/blueprints/stacks.js';
import config from '../../config.js';
import { bold, niceId } from '../../utils/display/colors.js';
const { token } = config;
export default class Destroy extends Command {
    static description = 'Destroy a deployed Blueprint Stack';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --id ST-a1b2c3',
    ];
    static flags = {
        id: Flags.string({
            description: 'Stack ID to destroy (defaults to current Stack)',
            required: false,
        }),
        force: Flags.boolean({
            description: 'Force destroy (skip confirmation)',
            default: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Destroy);
        const { errors, deployedStack, projectId } = await readBlueprintOnDisk({ getStack: true, token });
        if (errors.length > 0) {
            // printErrors(errors)
            this.warn('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (!projectId)
            this.error('Project resource not found in blueprint');
        const auth = { token, projectId };
        let stack = deployedStack;
        if (flags.id) {
            const { ok, stack: foundStack, error } = await getStack({ stackId: flags.id, auth });
            if (!ok)
                this.error(error || 'Failed to get stack');
            stack = foundStack;
        }
        else if (!stack) {
            this.error('No stack found');
        }
        if (!stack)
            this.error('Stack not found. Is it deployed?');
        const destroySpinner = Spinner({
            text: `Destroying ${bold(stack.name)} ${niceId(stack.id)}...`,
            color: 'red',
        });
        if (!flags.force) {
            const { confirm } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'confirm',
                    message: `Are you sure you want to destroy stack "${stack.name}" ${niceId(stack.id)}?`,
                    default: false,
                },
            ]);
            if (!confirm) {
                this.log('Stack destruction cancelled');
                return;
            }
            destroySpinner.start();
            let i = 5;
            while (i >= 0) {
                destroySpinner.text = `Destroying stack in ${bold((i--).toString())} seconds...`;
                await setTimeout(1000);
            }
            destroySpinner.text = 'Destroying stack ðŸ’¥';
            await setTimeout(500);
        }
        else {
            destroySpinner.start();
        }
        const { ok, error } = await destroyStack({ stackId: stack.id, auth });
        if (!ok)
            this.error(error || 'Failed to destroy stack');
        // TODO: update local config
        destroySpinner.success(`Stack "${stack.name}" ${niceId(stack.id)} destroyed`);
    }
}
