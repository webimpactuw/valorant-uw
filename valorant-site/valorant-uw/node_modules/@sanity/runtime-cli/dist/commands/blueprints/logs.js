import { Command, Flags } from '@oclif/core';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { findNewestLogTimestamp, getLogs, getRecentLogs, isNewerLog, streamLogs, } from '../../actions/blueprints/logs.js';
import config from '../../config.js';
import { formatTitle } from '../../utils/display/blueprints-formatting.js';
import { bold, red, yellow } from '../../utils/display/colors.js';
import { formatLogEntry, formatLogsByDay, organizeLogsByDay, } from '../../utils/display/logs-formatting.js';
const { token } = config;
export default class Logs extends Command {
    static description = 'Display logs for a Blueprint stack';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --watch',
    ];
    static flags = {
        watch: Flags.boolean({
            char: 'w',
            description: 'Watch for new logs (streaming mode)',
            required: false,
            default: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(Logs);
        const watchMode = flags.watch;
        try {
            const { errors, deployedStack } = await readBlueprintOnDisk({ getStack: true, token });
            if (errors.length > 0) {
                this.log('Blueprint parse errors:');
                console.dir(errors, { depth: null });
                return;
            }
            if (!deployedStack)
                this.error('Stack not found'); // returns
            const { id: stackId, projectId, name } = deployedStack;
            const auth = { token, projectId };
            const spinner = Spinner({ text: `Fetching logs for stack ${yellow(`<${stackId}>`)}` }).start();
            if (watchMode) {
                const { ok, logs, error } = await getLogs(stackId, auth);
                if (!ok) {
                    spinner.error(`${red('Failed')} to retrieve logs`);
                    this.log(`Error: ${error || 'Unknown error'}`);
                    return;
                }
                spinner.stop().clear(); // stop and remove the spinner
                this.log(`${formatTitle('Blueprint', name)} <${yellow(stackId)}> logs`);
                if (logs.length > 0) {
                    this.log('\nMost recent logs:');
                    const recentLogs = getRecentLogs(logs);
                    for (const log of recentLogs) {
                        this.log(`  ${formatLogEntry(log)}`);
                    }
                }
                else {
                    this.log(`No recent logs found for stack <${yellow(stackId)}>`);
                }
                const onOpen = () => {
                    this.log(`Watching for new logs... ${bold('ctrl+c')} to stop`);
                };
                let newestTimestamp = findNewestLogTimestamp(logs);
                const renderLog = (log) => {
                    if (!isNewerLog(log, newestTimestamp))
                        return;
                    newestTimestamp = new Date(log.timestamp).getTime();
                    this.log(formatLogEntry(log, true));
                };
                this.debug(`${yellow('Debug:')} Connecting to streaming endpoint for stack ${stackId}...`);
                streamLogs(stackId, auth, renderLog, onOpen, (error) => this.log(`${red('Error:')} ${error}`));
                return new Promise(() => {
                    // hold the line until the user terminates with Ctrl+C
                });
            }
            const { ok, logs, error } = await getLogs(stackId, auth);
            if (!ok) {
                spinner.error(`${red('Failed')} to retrieve logs`);
                this.log(`Error: ${error || 'Unknown error'}`);
                return;
            }
            if (logs.length === 0) {
                spinner.info(`No logs found for stack ${stackId}`);
                return;
            }
            spinner.success(`${formatTitle('Blueprint', name)} Logs`);
            this.log(`Found ${bold(logs.length.toString())} log entries for stack ${yellow(stackId)}\n`);
            // Organize and format logs by day
            const logsByDay = organizeLogsByDay(logs);
            this.log(formatLogsByDay(logsByDay));
        }
        catch (err) {
            this.warn('Failed to retrieve logs');
            if (err instanceof Error)
                this.error(`Error: ${err.message}`);
        }
    }
}
