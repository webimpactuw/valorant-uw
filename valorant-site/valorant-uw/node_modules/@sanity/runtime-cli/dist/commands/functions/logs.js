import { Args, Command, Flags } from '@oclif/core';
import inquirer from 'inquirer';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { deleteLogs as deleteLogsAction, logs as logsAction } from '../../actions/functions/logs.js';
import config from '../../config.js';
import { formatTitle } from '../../utils/display/blueprints-formatting.js';
import { blue, bold, green, red, yellow } from '../../utils/display/colors.js';
import { findFunctionByName } from '../../utils/find-function.js';
function logLevel(level) {
    if (level === 'ERROR') {
        return red(level);
    }
    if (level === 'WARN') {
        return yellow(level);
    }
    return green(level);
}
// TODO extract to a shared module
async function getProjectAndExternalId(name) {
    const { deployedStack } = await readBlueprintOnDisk({ getStack: true, token: config.token });
    if (!deployedStack) {
        return {};
    }
    const { projectId } = deployedStack;
    const { externalId } = findFunctionByName(deployedStack, name);
    return { projectId, externalId };
}
export default class Logs extends Command {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
    };
    static description = 'Retrieve or delete logs for a Sanity Function';
    static examples = [
        '<%= config.bin %> <%= command.id %> <name>',
        '<%= config.bin %> <%= command.id %> <name> --json',
        '<%= config.bin %> <%= command.id %> <name> --limit 100',
        '<%= config.bin %> <%= command.id %> <name> --delete',
    ];
    static flags = {
        limit: Flags.integer({
            char: 'l',
            description: 'Total number of log entries to retrieve',
            required: false,
            default: 50,
        }),
        json: Flags.boolean({
            char: 'j',
            description: 'Return logs in JSON format',
            required: false,
        }),
        delete: Flags.boolean({
            char: 'd',
            exclusive: ['limit', 'json'],
            description: 'Delete all logs for the function',
            required: false,
        }),
        force: Flags.boolean({
            char: 'f',
            dependsOn: ['delete'],
            description: 'Skip confirmation for deleting logs',
            required: false,
        }),
    };
    async run() {
        const { args, flags } = await this.parse(Logs);
        if (flags.delete === true) {
            await this.runDeleteLogs(args.name, flags);
        }
        else {
            await this.runGetLogs(args.name, flags);
        }
    }
    async runDeleteLogs(name, options) {
        if (!options.force) {
            const { certain } = await inquirer.prompt({
                type: 'confirm',
                name: 'certain',
                message: `Are you sure you want to delete ${bold('all')} logs for function ${yellow(name)}?`,
                default: false,
            });
            if (!certain)
                return;
        }
        const { projectId, externalId } = await getProjectAndExternalId(name);
        if (!projectId || !externalId) {
            this.error('Stack not found');
            return;
        }
        const spinner = Spinner({ text: `Deleting logs for function ${yellow(name)}` }).start();
        const { ok, error } = await deleteLogsAction(externalId, { token: config.token, projectId });
        if (!ok) {
            spinner.error(`${red('Failed')} to retrieve logs`);
            this.log(`Error: ${error || 'Unknown error'}`);
            return;
        }
        spinner.success('Logs deleted');
    }
    async runGetLogs(name, options) {
        const spinner = Spinner({ text: `Finding logs for function "${name}"` }).start();
        const { projectId, externalId } = await getProjectAndExternalId(name);
        if (!projectId || !externalId) {
            this.error('Stack not found');
            return;
        }
        const { ok, error, logs, total } = await logsAction(externalId, { limit: options.limit }, { token: config.token, projectId });
        if (!ok) {
            spinner.error(`${red('Failed')} to retrieve logs`);
            this.log(`Error: ${error || 'Unknown error'}`);
            return;
        }
        const filteredLogs = logs.filter((entry) => entry.level && entry.message);
        if (filteredLogs.length === 0) {
            spinner.info(`No logs found for function ${name}`);
            return;
        }
        spinner.success(`${formatTitle('Function', name)} Logs`);
        if (!options.json) {
            this.log(`Found ${bold(total)} log entries for function ${yellow(name)}`);
            if (logs.length < total) {
                this.log(`Here are the last ${bold(filteredLogs.length.toString())} entries`);
            }
            this.log('\n');
            for (const log of filteredLogs) {
                const { time, level, message } = log;
                const date = new Date(time);
                this.log(`${bold(date.toLocaleDateString())} ${bold(blue(date.toLocaleTimeString()))} ${logLevel(level)} ${message}`);
            }
        }
        else {
            this.log(JSON.stringify(filteredLogs, null, 2));
        }
    }
}
