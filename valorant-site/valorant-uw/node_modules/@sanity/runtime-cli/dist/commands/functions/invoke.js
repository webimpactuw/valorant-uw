import { Args, Command, Flags } from '@oclif/core';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { invoke } from '../../actions/functions/invoke.js';
import config from '../../config.js';
import { red } from '../../utils/display/colors.js';
import { findFunctionByName } from '../../utils/find-function.js';
export default class Invoke extends Command {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
    };
    static description = 'Invoke a remote Sanity Function';
    static examples = [
        `<%= config.bin %> <%= command.id %> <name> --data '{ "id": 1 }'`,
        `<%= config.bin %> <%= command.id %> <name> --file 'payload.json'`,
    ];
    static flags = {
        data: Flags.string({ char: 'd', description: 'Data to send to the function', required: false }),
        file: Flags.string({
            char: 'f',
            description: 'Read data from file and send to the function',
            required: false,
        }),
    };
    async run() {
        const { args, flags } = await this.parse(Invoke);
        const spinner = Spinner({ text: `Invoking function "${args.name}"` }).start();
        const { deployedStack } = await readBlueprintOnDisk({ getStack: true, token: config.token });
        if (!deployedStack)
            this.error('Stack not found'); // returns
        const { projectId } = deployedStack;
        const { externalId } = findFunctionByName(deployedStack, args.name);
        const result = await invoke(externalId, { data: flags.data, file: flags.file }, { token: config.token, projectId });
        if (result.ok) {
            spinner.success(`Invocation of ${args.name} succeeded`);
            if (result.json?.data?.type === 'Buffer') {
                return;
            }
            this.log(JSON.stringify(result.json, null, 2));
        }
        else {
            spinner.error(`${red('Failed')} to invoke function`);
            this.log(`Error: ${result.error || 'Unknown error'}`);
        }
    }
}
