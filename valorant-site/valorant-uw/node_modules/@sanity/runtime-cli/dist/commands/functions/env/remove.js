import { Args, Command } from '@oclif/core';
import Spinner from 'yocto-spinner';
import { readBlueprintOnDisk } from '../../../actions/blueprints/blueprint.js';
import { remove } from '../../../actions/functions/env/remove.js';
import config from '../../../config.js';
import { red } from '../../../utils/display/colors.js';
import { findFunctionByName } from '../../../utils/find-function.js';
export default class Remove extends Command {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
        key: Args.string({ description: 'The name of the environment variable', required: true }),
    };
    static description = 'Remove an environment variable for a Sanity function';
    static examples = ['<%= config.bin %> <%= command.id %> MyFunction API_URL'];
    async run() {
        const { args } = await this.parse(Remove);
        const spinner = Spinner({
            text: `Removing "${args.key}" environment variable in "${args.name}"`,
        }).start();
        const { deployedStack } = await readBlueprintOnDisk({ getStack: true, token: config.token });
        if (!deployedStack)
            this.error('Stack not found'); // returns
        const { projectId } = deployedStack;
        const { externalId } = findFunctionByName(deployedStack, args.name);
        const result = await remove(externalId, args.key, {
            token: config.token,
            projectId,
        });
        if (result.ok) {
            spinner.success(`Removal of ${args.key} succeeded`);
        }
        else {
            spinner.error(`${red('Failed')} to remove ${args.key}`);
            this.log(`Error: ${result.error || 'Unknown error'}`);
        }
    }
}
