import { Args, Command, Flags } from '@oclif/core';
import { readBlueprintOnDisk } from '../../actions/blueprints/blueprint.js';
import { testAction } from '../../actions/functions/test.js';
import { getFunctionSource } from '../../utils/find-function.js';
export default class Test extends Command {
    static args = {
        name: Args.string({ description: 'The name of the Sanity Function', required: true }),
    };
    static description = 'Invoke a local Sanity Function';
    static examples = [
        `<%= config.bin %> <%= command.id %> <name> --data '{ "id": 1 }'`,
        `<%= config.bin %> <%= command.id %> <name> --file 'payload.json'`,
        `<%= config.bin %> <%= command.id %> <name> --data '{ "id": 1 }' --timeout 60`,
    ];
    static flags = {
        data: Flags.string({ char: 'd', description: 'Data to send to the function', required: false }),
        file: Flags.string({
            char: 'f',
            description: 'Read data from file and send to the function',
            required: false,
        }),
        timeout: Flags.integer({
            char: 't',
            description: 'Execution timeout value in seconds',
            required: false,
        }),
        api: Flags.string({
            char: 'a',
            description: 'Sanity API Version to use',
            required: false,
        }),
        dataset: Flags.string({
            description: 'The Sanity dataset to use',
            required: false,
        }),
        project: Flags.string({
            description: 'The Sanity project to use',
            required: false,
        }),
    };
    async run() {
        const { args, flags } = await this.parse(Test);
        const { parsedBlueprint } = await readBlueprintOnDisk({ getStack: false });
        try {
            const src = getFunctionSource(parsedBlueprint, args.name);
            if (!src) {
                this.error(`Error: Function ${args.name} has no source code`);
            }
            const { json, logs, error } = await testAction(src, {
                data: flags.data,
                file: flags.file,
                timeout: flags.timeout,
            }, {
                apiVersion: flags.api,
                dataset: flags.dataset,
                projectId: flags.project,
            });
            if (!error) {
                this.log('Logs:');
                this.log(logs);
                this.log('Response:');
                this.log(JSON.stringify(json, null, 2));
            }
            else {
                this.log(error.toString());
            }
        }
        catch (error) {
            this.log(`Error: ${error || 'Unknown error'}`);
        }
    }
}
