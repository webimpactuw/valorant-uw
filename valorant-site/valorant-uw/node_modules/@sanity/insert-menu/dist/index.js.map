{"version":3,"file":"index.js","sources":["../src/getSchemaTypeIcon.ts","../src/InsertMenu.tsx"],"sourcesContent":["import {type ReferenceSchemaType, type SchemaType} from '@sanity/types'\nimport {type ComponentType} from 'react'\n\n/** @internal */\nexport function getSchemaTypeIcon(schemaType: SchemaType): ComponentType | undefined {\n  // Use reference icon if reference is to one schemaType only\n  const referenceIcon =\n    isReferenceSchemaType(schemaType) && (schemaType.to ?? []).length === 1\n      ? schemaType.to[0].icon\n      : undefined\n\n  return schemaType.icon ?? schemaType.type?.icon ?? referenceIcon\n}\n\nfunction isReferenceSchemaType(type: unknown): type is ReferenceSchemaType {\n  return isRecord(type) && (type['name'] === 'reference' || isReferenceSchemaType(type['type']))\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value == 'object' || typeof value == 'function')\n}\n","import {SearchIcon, ThLargeIcon, UlistIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Menu,\n  MenuItem,\n  Stack,\n  Tab,\n  TabList,\n  Text,\n  TextInput,\n  Tooltip,\n  type MenuItemProps,\n} from '@sanity/ui/_visual-editing'\nimport {startCase} from 'lodash'\nimport {useReducer, useState, type ChangeEvent, type CSSProperties} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {getSchemaTypeIcon} from './getSchemaTypeIcon'\nimport type {InsertMenuOptions} from './InsertMenuOptions'\n\ntype InsertMenuGroup = NonNullable<InsertMenuOptions['groups']>[number] & {selected: boolean}\ntype InsertMenuViews = NonNullable<InsertMenuOptions['views']>\ntype InsertMenuView = InsertMenuViews[number]\n\ntype InsertMenuEvent =\n  | {type: 'toggle view'; name: InsertMenuView['name']}\n  | {type: 'change query'; query: string}\n  | {type: 'select group'; name: string | undefined}\n\ntype InsertMenuState = {\n  query: string\n  groups: Array<InsertMenuGroup>\n  views: Array<InsertMenuViews[number] & {selected: boolean}>\n}\n\nfunction fullInsertMenuReducer(state: InsertMenuState, event: InsertMenuEvent): InsertMenuState {\n  return {\n    query: event.type === 'change query' ? event.query : state.query,\n    groups:\n      event.type === 'select group'\n        ? state.groups.map((group) => ({...group, selected: event.name === group.name}))\n        : state.groups,\n    views:\n      event.type === 'toggle view'\n        ? state.views.map((view) => ({...view, selected: event.name === view.name}))\n        : state.views,\n  }\n}\n\nconst ALL_ITEMS_GROUP_NAME = 'all-items'\n\nconst gridStyle: CSSProperties = {\n  gridTemplateColumns: 'repeat(auto-fill, minmax(118px, 1fr))',\n}\n\n/** @alpha */\nexport type InsertMenuProps = InsertMenuOptions & {\n  schemaTypes: Array<SchemaType>\n  onSelect: (schemaType: SchemaType) => void\n  labels: {\n    'insert-menu.filter.all-items': string\n    'insert-menu.search.no-results': string\n    'insert-menu.search.placeholder': string\n    'insert-menu.toggle-grid-view.tooltip': string\n    'insert-menu.toggle-list-view.tooltip': string\n  }\n}\n\n/** @alpha */\nexport function InsertMenu(props: InsertMenuProps): React.JSX.Element {\n  const showIcons = props.showIcons === undefined ? true : props.showIcons\n  const showFilter =\n    props.filter === undefined || props.filter === 'auto'\n      ? props.schemaTypes.length > 5\n      : props.filter\n  const [state, send] = useReducer(fullInsertMenuReducer, {\n    query: '',\n    groups: props.groups\n      ? [\n          {\n            name: ALL_ITEMS_GROUP_NAME,\n            title: props.labels['insert-menu.filter.all-items'],\n            selected: true,\n          },\n          ...props.groups.map((group) => ({...group, selected: false})),\n        ]\n      : [],\n    views: (props.views ?? [{name: 'list'}]).map((view, index) => ({\n      ...view,\n      selected: index === 0,\n    })),\n  })\n  const filteredSchemaTypes = filterSchemaTypes(props.schemaTypes, state.query, state.groups)\n  const selectedView = state.views.find((view) => view.selected)\n  const showingFilterOrViews = showFilter || state.views.length > 1\n  const showingTabs = state.groups && state.groups.length > 0\n  const showingAnyOptions = showingFilterOrViews || showingTabs\n\n  return (\n    <Menu padding={0}>\n      <Flex direction=\"column\" height=\"fill\">\n        <Box\n          {...(showingAnyOptions\n            ? {\n                style: {borderBottom: '1px solid var(--card-border-color)'},\n                paddingBottom: 1,\n              }\n            : {})}\n        >\n          {/* filter and views button */}\n          {showingFilterOrViews ? (\n            <Flex flex=\"none\" align=\"center\" paddingTop={1} paddingX={1} gap={1}>\n              {showFilter ? (\n                <Box flex={1}>\n                  <TextInput\n                    autoFocus\n                    border={false}\n                    fontSize={1}\n                    icon={SearchIcon}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                      send({type: 'change query', query: event.target.value})\n                    }}\n                    placeholder={props.labels['insert-menu.search.placeholder']}\n                    value={state.query}\n                  />\n                </Box>\n              ) : null}\n              {state.views.length > 1 ? (\n                <Box flex=\"none\">\n                  <ViewToggle\n                    views={state.views}\n                    onToggle={(name) => {\n                      send({type: 'toggle view', name})\n                    }}\n                    labels={props.labels}\n                  />\n                </Box>\n              ) : null}\n            </Flex>\n          ) : null}\n\n          {/* tabs */}\n          {showingTabs ? (\n            <Box paddingTop={1} paddingX={1}>\n              <TabList space={1}>\n                {state.groups.map((group) => (\n                  <Tab\n                    id={`${group.name}-tab`}\n                    aria-controls={`${group.name}-panel`}\n                    key={group.name}\n                    label={group.title ?? startCase(group.name)}\n                    selected={group.selected}\n                    onClick={() => {\n                      send({type: 'select group', name: group.name})\n                    }}\n                  />\n                ))}\n              </TabList>\n            </Box>\n          ) : null}\n        </Box>\n\n        {/* results */}\n        <Box padding={1}>\n          {filteredSchemaTypes.length === 0 ? (\n            <Box padding={2}>\n              <Text muted size={1}>\n                {props.labels['insert-menu.search.no-results']}\n              </Text>\n            </Box>\n          ) : !selectedView ? null : selectedView.name === 'grid' ? (\n            <Grid autoRows=\"auto\" flex={1} gap={1} style={gridStyle}>\n              {filteredSchemaTypes.map((schemaType) => (\n                <GridMenuItem\n                  key={schemaType.name}\n                  icon={showIcons ? getSchemaTypeIcon(schemaType) : undefined}\n                  onClick={() => {\n                    props.onSelect(schemaType)\n                  }}\n                  previewImageUrl={selectedView.previewImageUrl?.(schemaType.name)}\n                  schemaType={schemaType}\n                />\n              ))}\n            </Grid>\n          ) : (\n            <Stack flex={1} space={1}>\n              {filteredSchemaTypes.map((schemaType) => (\n                <MenuItem\n                  key={schemaType.name}\n                  icon={showIcons ? getSchemaTypeIcon(schemaType) : undefined}\n                  onClick={() => {\n                    props.onSelect(schemaType)\n                  }}\n                  text={schemaType.title ?? startCase(schemaType.name)}\n                />\n              ))}\n            </Stack>\n          )}\n        </Box>\n      </Flex>\n    </Menu>\n  )\n}\n\nconst viewToggleIcon: Record<InsertMenuView['name'], React.ElementType> = {\n  grid: ThLargeIcon,\n  list: UlistIcon,\n}\n\nconst viewToggleTooltip: Record<InsertMenuView['name'], keyof ViewToggleProps['labels']> = {\n  grid: 'insert-menu.toggle-grid-view.tooltip',\n  list: 'insert-menu.toggle-list-view.tooltip',\n}\n\ntype ViewToggleProps = {\n  views: InsertMenuState['views']\n  onToggle: (viewName: InsertMenuView['name']) => void\n  labels: Pick<\n    InsertMenuProps['labels'],\n    'insert-menu.toggle-grid-view.tooltip' | 'insert-menu.toggle-list-view.tooltip'\n  >\n}\n\nfunction ViewToggle(props: ViewToggleProps) {\n  const viewIndex = props.views.findIndex((view) => view.selected)\n  const nextView = props.views[viewIndex + 1] ?? props.views[0]\n\n  return (\n    <Tooltip\n      content={<Text size={1}>{props.labels[viewToggleTooltip[nextView.name]]}</Text>}\n      placement=\"top\"\n      portal\n    >\n      <Button\n        mode=\"bleed\"\n        icon={viewToggleIcon[nextView.name]}\n        onClick={() => {\n          props.onToggle(nextView.name)\n        }}\n      />\n    </Tooltip>\n  )\n}\n\ntype GridMenuItemProps = {\n  onClick: () => void\n  schemaType: SchemaType\n  icon: MenuItemProps['icon']\n  previewImageUrl: ReturnType<\n    NonNullable<\n      Extract<NonNullable<InsertMenuOptions['views']>[number], {name: 'grid'}>['previewImageUrl']\n    >\n  >\n}\n\nfunction GridMenuItem(props: GridMenuItemProps) {\n  const [failedToLoad, setFailedToLoad] = useState(false)\n  const Icon = props.icon\n\n  return (\n    <MenuItem padding={0} radius={2} onClick={props.onClick} style={{overflow: 'hidden'}}>\n      <Flex direction=\"column\" gap={1} padding={1}>\n        <Box\n          flex=\"none\"\n          style={{\n            backgroundColor: 'var(--card-muted-bg-color)',\n            paddingBottom: '66.6%',\n            position: 'relative',\n          }}\n        >\n          {isValidElementType(Icon) ? (\n            <Flex\n              align=\"center\"\n              justify=\"center\"\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n              }}\n            >\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Flex>\n          ) : null}\n          {!props.previewImageUrl || failedToLoad ? null : (\n            <img\n              src={props.previewImageUrl}\n              style={{\n                objectFit: 'contain',\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                inset: 0,\n              }}\n              onError={() => {\n                setFailedToLoad(true)\n              }}\n            />\n          )}\n\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              boxShadow: 'inset 0 0 0 0.5px var(--card-fg-color)',\n              opacity: 0.1,\n            }}\n          />\n        </Box>\n        <Box flex={1} padding={2}>\n          <Text size={1} weight=\"medium\">\n            {props.schemaType.title ?? props.schemaType.name}\n          </Text>\n        </Box>\n      </Flex>\n    </MenuItem>\n  )\n}\n\nfunction filterSchemaTypes(\n  schemaTypes: Array<SchemaType>,\n  query: string,\n  groups: Array<InsertMenuGroup>,\n) {\n  return schemaTypes.filter(\n    (schemaType) => passesGroupFilter(schemaType, groups) && passesQueryFilter(schemaType, query),\n  )\n}\n\nfunction passesQueryFilter(schemaType: SchemaType, query: string) {\n  const sanitizedQuery = query.trim().toLowerCase()\n\n  return schemaType.title\n    ? schemaType.title?.toLowerCase().includes(sanitizedQuery)\n    : schemaType.name.includes(sanitizedQuery)\n}\n\nfunction passesGroupFilter(schemaType: SchemaType, groups: Array<InsertMenuGroup>) {\n  const selectedGroup = groups.find((group) => group.selected)\n\n  return selectedGroup\n    ? selectedGroup.name === ALL_ITEMS_GROUP_NAME\n      ? true\n      : selectedGroup.of?.includes(schemaType.name)\n    : true\n}\n"],"names":["getSchemaTypeIcon","schemaType","referenceIcon","isReferenceSchemaType","to","length","icon","undefined","type","isRecord","value","fullInsertMenuReducer","state","event","query","groups","map","group","selected","name","views","view","ALL_ITEMS_GROUP_NAME","gridStyle","gridTemplateColumns","InsertMenu","props","$","_c","showIcons","showFilter","filter","schemaTypes","t0","labels","title","_temp","t1","t2","_temp2","t3","send","useReducer","T0","T1","T2","t4","t5","t6","t7","t8","t9","filteredSchemaTypes","filterSchemaTypes","selectedView","find","_temp3","showingFilterOrViews","showingTabs","showingAnyOptions","Menu","Flex","t10","style","borderBottom","paddingBottom","t11","SearchIcon","target","t12","group_0","startCase","Box","onSelect","previewImageUrl","schemaType_0","view_0","index","viewToggleIcon","grid","ThLargeIcon","list","UlistIcon","viewToggleTooltip","ViewToggle","viewIndex","findIndex","_temp4","nextView","onToggle","GridMenuItem","failedToLoad","setFailedToLoad","useState","Icon","Symbol","for","overflow","backgroundColor","position","isValidElementType","top","left","width","height","objectFit","inset","boxShadow","opacity","onClick","passesGroupFilter","passesQueryFilter","sanitizedQuery","trim","toLowerCase","includes","selectedGroup","of"],"mappings":"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"}