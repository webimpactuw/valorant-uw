{"version":3,"file":"buildAction2.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import path from 'node:path'\n\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport semver from 'semver'\nimport {noopLogger} from '@sanity/telemetry'\nimport {rimraf} from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nimport {buildStaticFiles} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\nimport {buildVendorDependencies} from '../../server/buildVendorDependencies'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {getStudioAutoUpdateImportMap} from '../../util/getAutoUpdatesImportMap'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {formatModuleSizes, sortModulesBySize} from '../../util/moduleFormatUtils'\n\nexport interface BuildSanityStudioCommandFlags {\n  'yes'?: boolean\n  'y'?: boolean\n  'minify'?: boolean\n  'stats'?: boolean\n  'source-maps'?: boolean\n  'auto-updates'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    'minify': true,\n    'stats': false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  /**\n   * Unattended mode means that if there are any prompts it will use `YES` for them but will no change anything that doesn't have a prompt\n   */\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return {didCompile: false}\n  }\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig})\n\n  // Get the version without any tags if any\n  const coercedSanityVersion = semver.coerce(installedSanityVersion)?.version\n  if (autoUpdatesEnabled && !coercedSanityVersion) {\n    throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n  }\n  const version = encodeURIComponent(`^${coercedSanityVersion}`)\n  const autoUpdatesImports = getStudioAutoUpdateImportMap(version)\n\n  if (autoUpdatesEnabled) {\n    output.print(`${info} Building with auto-updates enabled`)\n\n    // Check the versions\n    try {\n      const result = await compareDependencyVersions(autoUpdatesImports, workDir)\n\n      // If it is in unattended mode, we don't want to prompt\n      if (result?.length && !unattendedMode) {\n        const shouldContinue = await prompt.single({\n          type: 'confirm',\n          message: chalk.yellow(\n            `The following local package versions are different from the versions currently served at runtime.\\n` +\n              `When using auto updates, we recommend that you test locally with the same versions before deploying. \\n\\n` +\n              `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n` +\n              `Continue anyway?`,\n          ),\n          default: false,\n        })\n\n        if (!shouldContinue) {\n          return process.exit(0)\n        }\n      }\n    } catch (err) {\n      throw err\n    }\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner(`Build Sanity Studio`).start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n\n  let importMap\n\n  if (autoUpdatesEnabled) {\n    importMap = {\n      imports: {\n        ...(await buildVendorDependencies({cwd: workDir, outputDir, basePath})),\n        ...autoUpdatesImports,\n      },\n    }\n  }\n\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n      importMap,\n      reactCompiler:\n        cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n      entry: cliConfig && 'app' in cliConfig ? cliConfig.app?.entry : undefined,\n    })\n\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","buildSanityStudio","args","context","overrides","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","flags","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","checkStudioDependencyVersions","didInstall","installedSanityVersion","checkRequiredDependencies","didCompile","autoUpdatesEnabled","shouldAutoUpdate","coercedSanityVersion","semver","coerce","Error","encodeURIComponent","autoUpdatesImports","getStudioAutoUpdateImportMap","print","info","result","compareDependencyVersions","length","single","type","message","chalk","yellow","map","mod","pkg","installed","remote","default","process","exit","err","envVarKeys","getSanityEnvVars","forEach","key","shouldClean","basePath","envBasePath","env","SANITY_STUDIO_BASEPATH","configBasePath","project","warn","spin","start","spinner","rimraf","cleanDuration","end","text","toFixed","succeed","trace","importMap","imports","buildVendorDependencies","cwd","bundle","buildStaticFiles","sourceMap","minify","vite","undefined","reactCompiler","entry","app","log","outputSize","chunks","flatMap","chunk","modules","renderedLength","reduce","sum","n","buildDuration","complete","stats","formatModuleSizes","sortModulesBySize","slice","fail","error","Object","keys","filter","toUpperCase","startsWith"],"mappings":";;;;;;;;AAEO,MAAMA,aAAaC,UAAAA,YAAkC;AAAA,EAC1DC,MAAM;AAAA,EACNC,SAAS;AAAA,EACTC,aAAa;AACf,CAAC;ACuB6BC,eAAAA,kBAC5BC,MACAC,SACAC,WACgC;AAC1BC,QAAAA,QAAQC,OAAAA,YACR;AAAA,IAACC;AAAAA,IAAQC;AAAAA,IAAQC;AAAAA,IAASC;AAAAA,IAAAA,WAAWC,cAAYC,UAAAA;AAAAA,EAAAA,IAAcT,SAC/DU,QAAuC;AAAA,IAC3C,QAAU;AAAA,IACV,OAAS;AAAA,IACT,eAAe;AAAA,IACf,GAAGX,KAAKY;AAAAA,EACV,GAKMC,iBAAiBC,CAAQH,EAAAA,MAAMI,OAAOJ,MAAMK,IAC5CC,mBAAmBC,sBAAKC,QAAQD,cAAAA,QAAKE,KAAKb,SAAS,MAAM,CAAC,GAC1Dc,YAAYH,cAAAA,QAAKC,QAAQnB,KAAKsB,mBAAmB,CAAC,KAAKL,gBAAgB;AAE7E,QAAMM,0BAAAA,8BAA8BhB,OAAO;AAIrC,QAAA;AAAA,IAACiB;AAAAA,IAAYC;AAAAA,EAAAA,IAA0B,MAAMC,0BAAAA,0BAA0BzB,OAAO;AAChFuB,MAAAA;AACK,WAAA;AAAA,MAACG,YAAY;AAAA,IAAK;AAG3B,QAAMC,qBAAqBC,iBAAAA,iBAAiB;AAAA,IAAClB;AAAAA,IAAOH;AAAAA,EAAU,CAAA,GAGxDsB,uBAAuBC,gBAAAA,QAAOC,OAAOP,sBAAsB,GAAG5B;AACpE,MAAI+B,sBAAsB,CAACE;AACzB,UAAM,IAAIG,MAAM,6CAA6CR,sBAAsB,EAAE;AAEjF5B,QAAAA,UAAUqC,mBAAmB,IAAIJ,oBAAoB,EAAE,GACvDK,qBAAqBC,8CAA6BvC,OAAO;AAE/D,MAAI+B,oBAAoB;AACfS,WAAAA,MAAM,GAAGC,WAAI,IAAA,qCAAqC;AAGrD,QAAA;AACF,YAAMC,SAAS,MAAMC,2CAA0BL,oBAAoB5B,OAAO;AAG1E,UAAIgC,QAAQE,UAAU,CAAC5B,kBAYjB,CAXmB,MAAMP,OAAOoC,OAAO;AAAA,QACzCC,MAAM;AAAA,QACNC,SAASC,eAAAA,QAAMC,OACb;AAAA;AAAA;AAAA,EAEKP,OAAOQ,IAAKC,CAAQ,QAAA,MAAMA,IAAIC,GAAG,oBAAoBD,IAAIE,SAAS,sBAAsBF,IAAIG,MAAM,GAAG,EAAE/B,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA,iBAExH;AAAA,QACAgC,SAAS;AAAA,MAAA,CACV;AAGQC,eAAAA,QAAQC,KAAK,CAAC;AAAA,aAGlBC,KAAK;AACNA,YAAAA;AAAAA,IAAAA;AAAAA,EACR;AAGF,QAAMC,aAAaC,iBAAiB;AAChCD,aAAWf,SAAS,MACtBpC,OAAOgC,MACL;AAAA,gFACF,GACAmB,WAAWE,QAASC,CAAAA,QAAQtD,OAAOgC,MAAM,KAAKsB,GAAG,EAAE,CAAC,GACpDtD,OAAOgC,MAAM,EAAE;AAGjB,MAAIuB,cAAc;AACdvC,gBAAcJ,oBAAoB,CAACJ,mBACrC+C,cAAc,MAAMtD,OAAOoC,OAAO;AAAA,IAChCC,MAAM;AAAA,IACNC,SAAS,iDAAiDvB,SAAS;AAAA,IACnE+B,SAAS;AAAA,EAAA,CACV;AAIH,MAAIS,WAAW;AACf,QAAMC,cAAcT,QAAQU,IAAIC,wBAC1BC,iBAAiBzD,WAAW0D,SAASL;AAGvC3D,aAAW2D,WACbA,WAAW3D,UAAU2D,WACZC,cAETD,WAAWC,cACFG,mBAETJ,WAAWI,iBAGTH,eAAeG,kBACjB5D,OAAO8D,KACL,oCAAoCF,cAAc,2CAA2CH,WAAW,GAC1G;AAGEM,MAAAA;AAEJ,MAAIR,aAAa;AACfzD,UAAMkE,MAAM,mBAAmB,GAC/BD,OAAO/D,OAAOiE,QAAQ,qBAAqB,EAAED,MAAM,GACnD,MAAME,OAAAA,OAAOlD,SAAS;AAChBmD,UAAAA,gBAAgBrE,MAAMsE,IAAI,mBAAmB;AACnDL,SAAKM,OAAO,wBAAwBF,cAAcG,SAAS,OAC3DP,KAAKQ,QAAQ;AAAA,EAAA;AAGfR,SAAO/D,OAAOiE,QAAQ,qBAAqB,EAAED,MAAM;AAE7CQ,QAAAA,QAAQpE,YAAUoE,MAAMnF,UAAU;AACxCmF,QAAMR,MAAM;AAERS,MAAAA;AAEAlD,yBACFkD,YAAY;AAAA,IACVC,SAAS;AAAA,MACP,GAAI,MAAMC,iBAAAA,wBAAwB;AAAA,QAACC,KAAK1E;AAAAA,QAASc;AAAAA,QAAWwC;AAAAA,MAAAA,CAAS;AAAA,MACrE,GAAG1B;AAAAA,IAAAA;AAAAA,EACL;AAIA,MAAA;AACFhC,UAAMkE,MAAM,cAAc;AAEpBa,UAAAA,SAAS,MAAMC,+BAAiB;AAAA,MACpCF,KAAK1E;AAAAA,MACLc;AAAAA,MACAwC;AAAAA,MACAuB,WAAWtE,CAAQH,CAAAA,MAAM,aAAa;AAAA,MACtC0E,QAAQvE,EAAQH,MAAM0E;AAAAA,MACtBC,MAAM9E,aAAa,UAAUA,YAAYA,UAAU8E,OAAOC;AAAAA,MAC1DT;AAAAA,MACAU,eACEhF,aAAa,mBAAmBA,YAAYA,UAAUgF,gBAAgBD;AAAAA,MACxEE,OAAOjF,aAAa,SAASA,YAAYA,UAAUkF,KAAKD,QAAQF;AAAAA,IAAAA,CACjE;AAEDV,UAAMc,IAAI;AAAA,MACRC,YAAYV,OAAOW,OAChBC,QAASC,CAAUA,UAAAA,MAAMC,QAAQF,QAAS9C,CAAAA,QAAQA,IAAIiD,cAAc,CAAC,EACrEC,OAAO,CAACC,KAAKC,MAAMD,MAAMC,GAAG,CAAC;AAAA,IAAA,CACjC;AACKC,UAAAA,gBAAgBlG,MAAMsE,IAAI,cAAc;AAE9CL,SAAKM,OAAO,wBAAwB2B,cAAc1B,QAAAA,CAAS,OAC3DP,KAAKQ,QAAQ,GAEbC,MAAMyB,SAAS,GACX3F,MAAM4F,UACRlG,OAAOgC,MAAM;AAAA,sBAAyB,GACtChC,OAAOgC,MAAMmE,iBAAAA,kBAAkBC,iBAAAA,kBAAkBvB,OAAOW,MAAM,EAAEa,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,WAExEnD,KAAK;AACZa,UAAAA,KAAKuC,KAAK,GACV9B,MAAM+B,MAAMrD,GAAG,GACTA;AAAAA,EAAAA;AAGD,SAAA;AAAA,IAAC5B,YAAY;AAAA,EAAI;AAC1B;AAGA,SAAS8B,iBAAiBM,MAA0CV,QAAQU,KAAe;AAClF8C,SAAAA,OAAOC,KAAK/C,GAAG,EAAEgD,OAAQpD,CAAQA,QAAAA,IAAIqD,YAAY,EAAEC,WAAW,gBAAgB,CAAC;AACxF;;"}