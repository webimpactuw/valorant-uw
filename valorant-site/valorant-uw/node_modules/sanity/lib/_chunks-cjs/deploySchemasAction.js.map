{"version":3,"file":"deploySchemasAction.js","sources":["../../src/_internal/cli/actions/schema/utils/workspaceSchemaId.ts","../../src/_internal/cli/actions/schema/deploySchemasAction.ts"],"sourcesContent":["import {\n  SANITY_WORKSPACE_SCHEMA_TYPE,\n  type WorkspaceSchemaId,\n} from '../../../../manifest/manifestTypes'\nimport {validForIdChars, validForIdPattern} from './schemaStoreValidation'\n\nexport function getWorkspaceSchemaId(args: {workspaceName: string; idPrefix?: string}) {\n  const {workspaceName: rawWorkspaceName, idPrefix} = args\n\n  let workspaceName = rawWorkspaceName\n  let idWarning: string | undefined\n\n  if (!workspaceName.match(validForIdPattern)) {\n    workspaceName = workspaceName.replace(new RegExp(`[^${validForIdChars}]`, 'g'), '_')\n    idWarning = [\n      `Workspace \"${rawWorkspaceName}\" contains characters unsupported by schema _id [${validForIdChars}], they will be replaced with _.`,\n      'This could lead duplicate schema ids: consider renaming your workspace.',\n    ].join('\\n')\n  }\n  return {\n    safeId:\n      `${idPrefix ? (`${idPrefix}.` as const) : ''}${SANITY_WORKSPACE_SCHEMA_TYPE}.${workspaceName}` satisfies WorkspaceSchemaId,\n    idWarning,\n  }\n}\n","import {type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport chalk from 'chalk'\nimport partition from 'lodash/partition'\n\nimport {\n  type ManifestWorkspaceFile,\n  SANITY_WORKSPACE_SCHEMA_TYPE,\n  type StoredWorkspaceSchema,\n} from '../../../manifest/manifestTypes'\nimport {type SchemaStoreActionResult, type SchemaStoreContext} from './schemaStoreTypes'\nimport {createManifestExtractor, ensureManifestExtractSatisfied} from './utils/mainfestExtractor'\nimport {type CreateManifestReader, createManifestReader} from './utils/manifestReader'\nimport {createSchemaApiClient} from './utils/schemaApiClient'\nimport {\n  FlagValidationError,\n  parseDeploySchemasConfig,\n  type SchemaStoreCommonFlags,\n  throwWriteProjectIdMismatch,\n} from './utils/schemaStoreValidation'\nimport {getWorkspaceSchemaId} from './utils/workspaceSchemaId'\n\nexport interface DeploySchemasFlags extends SchemaStoreCommonFlags {\n  'workspace'?: string\n  'id-prefix'?: string\n  'schema-required'?: boolean\n}\n\nexport default function deploySchemasActionForCommand(\n  flags: DeploySchemasFlags,\n  context: CliCommandContext,\n): Promise<SchemaStoreActionResult> {\n  return deploySchemasAction(\n    {\n      ...flags,\n      //invoking the command through CLI implies that schema is required\n      'schema-required': true,\n    },\n    {\n      ...context,\n      manifestExtractor: createManifestExtractor(context),\n    },\n  )\n}\n\n/**\n *\n * Stores schemas for configured workspaces into workspace datasets.\n *\n * Workspaces are determined by on-disk manifest file – not directly from sanity.config.\n * All schema store actions require a manifest to exist, so we regenerate it by default.\n * Manifest generation can be optionally disabled with --no-manifest-extract.\n * In this case the command uses and existing file or throws when missing.\n */\nexport async function deploySchemasAction(\n  flags: DeploySchemasFlags,\n  context: SchemaStoreContext,\n): Promise<SchemaStoreActionResult> {\n  const {workspaceName, verbose, idPrefix, manifestDir, extractManifest, schemaRequired} =\n    parseDeploySchemasConfig(flags, context)\n\n  const {output, apiClient, jsonReader, manifestExtractor} = context\n\n  // prettier-ignore\n  if (!(await ensureManifestExtractSatisfied({schemaRequired, extractManifest, manifestDir, manifestExtractor, output,}))) {\n    return 'failure'\n  }\n\n  try {\n    const {client, projectId} = createSchemaApiClient(apiClient)\n    const manifestReader = createManifestReader({manifestDir, output, jsonReader})\n    const manifest = await manifestReader.getManifest()\n\n    const storeWorkspaceSchema = createStoreWorkspaceSchema({\n      idPrefix,\n      projectId,\n      verbose,\n      client,\n      output,\n      manifestReader,\n    })\n\n    const targetWorkspaces = manifest.workspaces.filter(\n      (workspace) => !workspaceName || workspace.name === workspaceName,\n    )\n\n    if (!targetWorkspaces.length) {\n      if (workspaceName) {\n        throw new FlagValidationError(`Found no workspaces named \"${workspaceName}\"`)\n      } else {\n        throw new Error(`Workspace array in manifest is empty.`)\n      }\n    }\n\n    //known caveat: we _dont_ rollback failed operations or partial success\n    const results = await Promise.allSettled(\n      targetWorkspaces.map(async (workspace: ManifestWorkspaceFile): Promise<void> => {\n        await storeWorkspaceSchema(workspace)\n      }),\n    )\n\n    const [successes, failures] = partition(results, (result) => result.status === 'fulfilled')\n    if (failures.length) {\n      throw new Error(\n        `Failed to deploy ${failures.length}/${targetWorkspaces.length} schemas. Successfully deployed ${successes.length}/${targetWorkspaces.length} schemas.`,\n      )\n    }\n\n    output.success(`Deployed ${successes.length}/${targetWorkspaces.length} schemas`)\n    return 'success'\n  } catch (err) {\n    if (schemaRequired || err instanceof FlagValidationError) {\n      throw err\n    } else {\n      output.print(`↳ Error when storing schemas:\\n  ${err.message}`)\n      return 'failure'\n    }\n  } finally {\n    output.print(\n      `${chalk.gray('↳ List deployed schemas with:')} ${chalk.cyan('sanity schema list')}`,\n    )\n  }\n}\n\nfunction createStoreWorkspaceSchema(args: {\n  idPrefix?: string\n  projectId: string\n  verbose: boolean\n  client: SanityClient\n  output: CliOutputter\n  manifestReader: CreateManifestReader\n}): (workspace: ManifestWorkspaceFile) => Promise<void> {\n  const {idPrefix, projectId, verbose, client, output, manifestReader} = args\n\n  return async (workspace) => {\n    const {safeId: id, idWarning} = getWorkspaceSchemaId({workspaceName: workspace.name, idPrefix})\n    if (idWarning) output.warn(idWarning)\n\n    try {\n      throwWriteProjectIdMismatch(workspace, projectId)\n      const schema = await manifestReader.getWorkspaceSchema(workspace.name)\n\n      const storedWorkspaceSchema: StoredWorkspaceSchema = {\n        _type: SANITY_WORKSPACE_SCHEMA_TYPE,\n        _id: id,\n        workspace,\n        // we have to stringify the schema to save on attribute paths\n        schema: JSON.stringify(schema),\n      }\n\n      await client\n        .withConfig({dataset: workspace.dataset, projectId: workspace.projectId})\n        .createOrReplace(storedWorkspaceSchema)\n\n      if (verbose) {\n        output.print(\n          chalk.gray(`↳ schemaId: ${id}, projectId: ${projectId}, dataset: ${workspace.dataset}`),\n        )\n      }\n    } catch (err) {\n      output.error(\n        `↳ Error deploying schema for workspace \"${workspace.name}\":\\n  ${chalk.red(`${err.message}`)}`,\n      )\n      throw err\n    }\n  }\n}\n"],"names":["getWorkspaceSchemaId","args","workspaceName","rawWorkspaceName","idPrefix","idWarning","match","validForIdPattern","replace","RegExp","validForIdChars","join","safeId","SANITY_WORKSPACE_SCHEMA_TYPE","deploySchemasActionForCommand","flags","context","deploySchemasAction","manifestExtractor","createManifestExtractor","verbose","manifestDir","extractManifest","schemaRequired","parseDeploySchemasConfig","output","apiClient","jsonReader","ensureManifestExtractSatisfied","client","projectId","createSchemaApiClient","manifestReader","createManifestReader","manifest","getManifest","storeWorkspaceSchema","createStoreWorkspaceSchema","targetWorkspaces","workspaces","filter","workspace","name","length","FlagValidationError","Error","results","Promise","allSettled","map","successes","failures","partition","result","status","success","err","print","message","chalk","gray","cyan","id","warn","throwWriteProjectIdMismatch","schema","getWorkspaceSchema","storedWorkspaceSchema","_type","_id","JSON","stringify","withConfig","dataset","createOrReplace","error","red"],"mappings":"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"}