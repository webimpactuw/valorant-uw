{"version":3,"file":"devAction2.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\n\nimport {debug} from './debug'\nimport {extendViteConfigWithUserConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  reactCompiler: ReactCompilerConfig | undefined\n  vite?: UserViteConfig\n  entry?: string\n  isApp?: boolean\n  skipStartLog?: boolean\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {\n    cwd,\n    httpPort,\n    httpHost,\n    basePath,\n    reactStrictMode,\n    vite: extendViteConfig,\n    reactCompiler,\n    entry,\n    isApp,\n    skipStartLog,\n  } = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true, basePath, entry, isApp})\n\n  debug('Resolving vite config')\n  const mode = 'development'\n\n  let viteConfig = await getViteConfig({\n    basePath,\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n    reactCompiler,\n    isApp,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const {createServer} = await import('vite')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  if (!skipStartLog) {\n    const startupDuration = Date.now() - startTime\n    const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}${basePath}`\n    const appType = isApp ? 'Sanity application' : 'Sanity Studio'\n    info(\n      `${appType} ` +\n        `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n        `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n        `and running at ${chalk.cyan(url)}`,\n    )\n  }\n  return {close: () => server.close()}\n}\n","import path from 'node:path'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\nimport {type SanityProject} from '@sanity/client'\nimport chalk from 'chalk'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {debug as debugIt} from '../../debug'\nimport {type DevServerOptions, startDevServer} from '../../server/devServer'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\nimport {getTimer} from '../../util/timing'\n\nexport interface StartDevServerCommandFlags {\n  'host'?: string\n  'port'?: string\n  'load-in-dashboard'?: boolean\n  'force'?: boolean\n}\n\nconst debug = debugIt.extend('dev')\n\nconst getDefaultCoreURL = ({\n  organizationId,\n  url,\n}: {\n  organizationId: string\n  url: string\n}): string => {\n  const params = new URLSearchParams({\n    url,\n  })\n\n  return process.env.SANITY_INTERNAL_ENV === 'staging'\n    ? `https://sanity.work/@${organizationId}?${params.toString()}`\n    : `https://sanity.io/@${organizationId}?${params.toString()}`\n}\n\nconst getCoreApiURL = (): string => {\n  return process.env.SANITY_INTERNAL_ENV === 'staging' ? 'https://sanity.work' : 'https://sanity.io'\n}\n\nexport const getCoreURL = async ({\n  fetchFn = globalThis.fetch,\n  timeout = 5000,\n  organizationId,\n  url,\n}: {\n  fetchFn?: typeof globalThis.fetch\n  timeout?: number\n  organizationId: string\n  url: string\n}): Promise<string> => {\n  const abortController = new AbortController()\n  // Wait for 5 seconds before aborting the request\n  const timer = setTimeout(() => abortController.abort(), timeout)\n  try {\n    const queryParams = new URLSearchParams({\n      organizationId,\n      url,\n    })\n\n    const res = await fetchFn(\n      `${getCoreApiURL()}/api/dashboard/mode/development/resolve-url?${queryParams.toString()}`,\n      {\n        signal: abortController.signal,\n      },\n    )\n\n    if (!res.ok) {\n      debug(`Failed to fetch core URL: ${res.statusText}`)\n      return getDefaultCoreURL({organizationId, url})\n    }\n\n    const body = await res.json()\n    return body.url\n  } catch (err) {\n    debug(`Failed to fetch core URL: ${err.message}`)\n    return getDefaultCoreURL({organizationId, url})\n  } finally {\n    clearTimeout(timer)\n  }\n}\n\n/**\n * Gets the core URL from API or uses the default core URL\n */\nexport const getCoreAppURL = async ({\n  organizationId,\n  httpHost = 'localhost',\n  httpPort = 3333,\n}: {\n  organizationId: string\n  httpHost?: string\n  httpPort?: number\n}): Promise<string> => {\n  const url = await getCoreURL({\n    organizationId,\n    url: `http://${httpHost}:${httpPort}`,\n  })\n\n  // <core-app-url>/<orgniazationId>?dev=<dev-server-url>\n  return url\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  // Using slice(1) to remove the first argument, which is the command `dev` path to the CLI\n  return yargs(hideBin(args.argv || process.argv).slice(1))\n    .options('host', {type: 'string'})\n    .options('port', {type: 'number'})\n    .option('load-in-dashboard', {type: 'boolean', default: false}).argv\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const timers = getTimer()\n  const flags = await parseCliFlags(args)\n  const {output, apiClient, workDir, cliConfig} = context\n\n  const {loadInDashboard} = flags\n\n  timers.start('checkStudioDependencyVersions')\n  await checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({flags, workDir, cliConfig, output})\n\n  const projectId = cliConfig?.api?.projectId\n  let organizationId: string | undefined | null\n\n  if (loadInDashboard) {\n    if (!projectId) {\n      output.error('Project Id is required to load in dashboard')\n      process.exit(1)\n    }\n\n    const client = apiClient({\n      requireUser: true,\n      requireProject: true,\n    })\n\n    try {\n      const project = await client.request<SanityProject>({uri: `/projects/${projectId}`})\n      organizationId = project.organizationId\n    } catch (err) {\n      debug(`Failed to get organization Id from project Id: ${err}`)\n      output.error('Failed to get organization Id from project Id')\n      process.exit(1)\n    }\n  }\n\n  try {\n    const spinner = output.spinner('Starting dev server').start()\n    await startDevServer({...config, skipStartLog: loadInDashboard})\n    spinner.succeed()\n\n    if (loadInDashboard) {\n      if (!organizationId) {\n        output.error('Organization Id not found for project')\n        process.exit(1)\n      }\n\n      output.print(`Dev server started on ${config.httpPort} port`)\n      output.print(`View your app in the Sanity dashboard here:`)\n      output.print(\n        chalk.blue(\n          chalk.underline(\n            await getCoreAppURL({\n              organizationId,\n              httpHost: config.httpHost,\n              httpPort: config.httpPort,\n            }),\n          ),\n        ),\n      )\n    }\n  } catch (err) {\n    debug(`Failed to start dev server: ${err}`)\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nexport function getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n  output,\n}: {\n  flags: Awaited<ReturnType<typeof parseCliFlags>>\n  workDir: string\n  cliConfig?: CliConfig\n  output: CliOutputter\n}): DevServerOptions {\n  const configSpinner = output.spinner('Checking configuration files...')\n  const baseConfig = getSharedServerConfig({\n    flags: {\n      host: flags.host,\n      port: flags.port,\n    },\n    workDir,\n    cliConfig,\n  })\n  configSpinner.succeed()\n\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  if (env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath) {\n    output.warn(\n      `Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`,\n    )\n  }\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n    reactCompiler: cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n  }\n}\n"],"names":["startDevServer","options","cwd","httpPort","httpHost","basePath","reactStrictMode","vite","extendViteConfig","reactCompiler","entry","isApp","skipStartLog","startTime","Date","now","debug","writeSanityRuntime","watch","mode","viteConfig","getViteConfig","server","port","host","extendViteConfigWithUserConfig","command","createServer","info","config","logger","listen","startupDuration","url","chalk","cyan","require","version","Math","ceil","close","debugIt","extend","getDefaultCoreURL","organizationId","params","URLSearchParams","process","env","SANITY_INTERNAL_ENV","toString","getCoreApiURL","getCoreURL","fetchFn","globalThis","fetch","timeout","abortController","AbortController","timer","setTimeout","abort","queryParams","res","signal","ok","json","statusText","err","message","clearTimeout","getCoreAppURL","parseCliFlags","args","yargs","hideBin","argv","slice","type","option","default","startSanityDevServer","context","timers","getTimer","flags","output","apiClient","workDir","cliConfig","loadInDashboard","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","getDevServerConfig","projectId","api","error","exit","client","requireUser","requireProject","request","uri","spinner","succeed","print","blue","underline","gracefulServerDeath","configSpinner","baseConfig","getSharedServerConfig","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","SANITY_STUDIO_BASEPATH","project","warn","staticPath","path","join","undefined"],"mappings":"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"}