{"version":3,"file":"listSchemasAction.js","sources":["../../src/_internal/cli/actions/schema/listSchemasAction.ts"],"sourcesContent":["import {type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport chalk from 'chalk'\nimport sortBy from 'lodash/sortBy'\nimport uniq from 'lodash/uniq'\n\nimport {isDefined} from '../../../manifest/manifestTypeHelpers'\nimport {\n  SANITY_WORKSPACE_SCHEMA_TYPE,\n  type StoredWorkspaceSchema,\n} from '../../../manifest/manifestTypes'\nimport {type SchemaStoreActionResult, type SchemaStoreContext} from './schemaStoreTypes'\nimport {createManifestExtractor, ensureManifestExtractSatisfied} from './utils/mainfestExtractor'\nimport {createManifestReader} from './utils/manifestReader'\nimport {createSchemaApiClient} from './utils/schemaApiClient'\nimport {getDatasetsOutString} from './utils/schemaStoreOutStrings'\nimport {\n  filterLogReadProjectIdMismatch,\n  parseListSchemasConfig,\n  type SchemaStoreCommonFlags,\n} from './utils/schemaStoreValidation'\n\nexport interface SchemaListFlags extends SchemaStoreCommonFlags {\n  json?: boolean\n  id?: string\n}\n\nclass DatasetError extends Error {\n  public dataset: string\n  constructor(dataset: string, options?: ErrorOptions) {\n    super((options?.cause as {message?: string})?.message, options)\n    this.dataset = dataset\n    this.name = 'DatasetError'\n  }\n}\n\nexport default function listSchemasActionForCommand(\n  flags: SchemaListFlags,\n  context: CliCommandContext,\n): Promise<SchemaStoreActionResult> {\n  return listSchemasAction(flags, {\n    ...context,\n    manifestExtractor: createManifestExtractor(context),\n  })\n}\n\n/**\n * Lists stored schemas found in workspace datasets.\n *\n * Workspaces are determined by on-disk manifest file – not directly from sanity.config.\n * All schema store actions require a manifest to exist, so we regenerate it by default.\n * Manifest generation can be optionally disabled with --no-manifest-extract.\n * In this case the command uses and existing file or throws when missing.\n */\nexport async function listSchemasAction(\n  flags: SchemaListFlags,\n  context: SchemaStoreContext,\n): Promise<SchemaStoreActionResult> {\n  const {json, id, manifestDir, extractManifest} = parseListSchemasConfig(flags, context)\n  const {output, apiClient, jsonReader, manifestExtractor} = context\n\n  // prettier-ignore\n  if (!(await ensureManifestExtractSatisfied({schemaRequired: true, extractManifest, manifestDir,  manifestExtractor, output,}))) {\n    return 'failure'\n  }\n  const {client, projectId} = createSchemaApiClient(apiClient)\n\n  const manifest = await createManifestReader({manifestDir, output, jsonReader}).getManifest()\n  const workspaces = manifest.workspaces.filter((workspace) =>\n    filterLogReadProjectIdMismatch(workspace, projectId, output),\n  )\n\n  const datasets = uniq(workspaces.map((w) => w.dataset))\n\n  const schemaResults = await Promise.allSettled(\n    datasets.map(async (dataset) => {\n      try {\n        const datasetClient = client.withConfig({dataset})\n        return id\n          ? datasetClient.getDocument<StoredWorkspaceSchema>(id)\n          : datasetClient.fetch<StoredWorkspaceSchema[]>(`*[_type == $type]`, {\n              type: SANITY_WORKSPACE_SCHEMA_TYPE,\n            })\n      } catch (error) {\n        throw new DatasetError(dataset, {cause: error})\n      }\n    }),\n  )\n\n  const schemas = schemaResults\n    .map((result, index) => {\n      if (result.status === 'fulfilled') return result.value\n\n      if (result.reason instanceof DatasetError) {\n        const message = chalk.red(\n          `↳ Failed to fetch schema from dataset \"${result.reason.dataset}\":\\n  ${result.reason.message}`,\n        )\n        output.error(message)\n      } else {\n        //hubris inc: given the try-catch wrapping all the full promise \"this should never happen\"\n        throw result.reason\n      }\n      return []\n    })\n    .filter(isDefined)\n    .flat()\n\n  if (schemas.length === 0) {\n    const datasetString = getDatasetsOutString(datasets)\n    output.error(\n      id\n        ? `Schema for id \"${id}\" not found in ${datasetString}`\n        : `No schemas found in ${datasetString}`,\n    )\n    return 'failure'\n  }\n\n  if (json) {\n    output.print(`${JSON.stringify(id ? schemas[0] : schemas, null, 2)}`)\n  } else {\n    printSchemaList({schemas, output})\n  }\n  return 'success'\n}\n\nfunction printSchemaList({\n  schemas,\n  output,\n}: {\n  schemas: StoredWorkspaceSchema[]\n  output: CliOutputter\n}) {\n  const ordered = sortBy(\n    schemas.map(({_createdAt: createdAt, _id: id, workspace}) => {\n      return [id, workspace.name, workspace.dataset, workspace.projectId, createdAt].map(String)\n    }),\n    ['createdAt'],\n  )\n  const headings = ['Id', 'Workspace', 'Dataset', 'ProjectId', 'CreatedAt']\n  const rows = ordered.reverse()\n\n  const maxWidths = rows.reduce(\n    (max, row) => row.map((current, index) => Math.max(current.length, max[index])),\n    headings.map((str) => str.length),\n  )\n\n  const rowToString = (row: string[]) =>\n    row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n\n  output.print(chalk.cyan(rowToString(headings)))\n  rows.forEach((row) => output.print(rowToString(row)))\n}\n"],"names":["DatasetError","Error","constructor","dataset","options","cause","message","name","listSchemasActionForCommand","flags","context","listSchemasAction","manifestExtractor","createManifestExtractor","json","id","manifestDir","extractManifest","parseListSchemasConfig","output","apiClient","jsonReader","ensureManifestExtractSatisfied","schemaRequired","client","projectId","createSchemaApiClient","workspaces","createManifestReader","getManifest","filter","workspace","filterLogReadProjectIdMismatch","datasets","uniq","map","w","schemas","Promise","allSettled","datasetClient","withConfig","getDocument","fetch","type","SANITY_WORKSPACE_SCHEMA_TYPE","error","result","index","status","value","reason","chalk","red","isDefined","flat","length","datasetString","getDatasetsOutString","print","JSON","stringify","printSchemaList","ordered","sortBy","_createdAt","createdAt","_id","String","headings","rows","reverse","maxWidths","reduce","max","row","current","Math","str","rowToString","col","i","padEnd","join","cyan","forEach"],"mappings":"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"}